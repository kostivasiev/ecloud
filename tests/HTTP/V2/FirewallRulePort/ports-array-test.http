###
# Create Policy
POST https://{{host}}/{{version}}/firewall-policies
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "name": "Test Policy - Port Array",
  "sequence": 10,
  "router_id": "{{dev_router_id}}"
}

> {%
client.test('Create firewall policy', function () {
    client.assert(response.status === 201, '201 response not received');
    client.global.set('firewall_policy_id', response.body.data.id);
    client.log('Policy ID: ' + response.body.data.id);
});
%}

###
# Create Rule with empty port array
POST https://{{host}}/v2/firewall-rules
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "sequence": 1,
    "firewall_policy_id": "{{firewall_policy_id}}",
    "source": "1.1.1.1",
    "destination": "2.2.2.2",
    "action": "ALLOW",
    "direction": "IN_OUT",
    "enabled": true,
    "ports": []
}

> {%
client.test('Create firewall rule', function () {
    client.assert(response.status === 201, '201 response not received');
    client.global.set('firewall_rule_id', response.body.data.id);
    client.log('Rule ID: ' + response.body.data.id);
});
%}

###
# PATCH Rule with empty port array
PATCH https://{{host}}/v2/firewall-rules/{{firewall_rule_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "sequence": 1,
    "firewall_policy_id": "fwp-42ccbbb6",
    "source": "1.1.1.1",
    "destination": "2.2.2.2",
    "action": "ALLOW",
    "direction": "IN_OUT",
    "enabled": true,
    "ports": []
}

> {%
client.test('Update firewall rule', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

###
# PATCH Rule with non-empty port array
PATCH https://{{host}}/v2/firewall-rules/{{firewall_rule_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "sequence": 1,
    "firewall_policy_id": "fwp-42ccbbb6",
    "source": "1.1.1.1",
    "destination": "2.2.2.2",
    "action": "ALLOW",
    "direction": "IN_OUT",
    "enabled": true,
    "ports": [{"protocol": "TCP", "source": "443", "destination": "443"}]
}

> {%
client.test('Update firewall rule', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

###
# DELETE Rule
DELETE https://{{host}}/v2/firewall-rules/{{firewall_rule_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Delete firewall rule', function () {
    client.assert(response.status === 204, '204 response not received');
});
%}

###
# DELETE Policy
DELETE https://{{host}}/{{version}}/firewall-policies/{{firewall_policy_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Delete firewall policy', function () {
    client.assert(response.status === 204, '204 response not received');
});
%}