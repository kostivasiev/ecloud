### Create a hidden imaage parameter
POST https://{{host}}/{{version}}/image-parameters
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Test Hidden Image Parameter",
    "image_id": "{{dev_image_id}}",
    "key": "Username",
    "type": "String",
    "description": "Lorem ipsum",
    "required": true,
    "validation_rule": "/\\w+/",
    "is_hidden": true
}

> {%

client.global.set("image_parameter_id", response.body.data.id);
client.log("Image Parameter ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201");
});
%}

### Test returned in collection for admin
GET https://{{host}}/{{version}}/image-parameters
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.filter(e => e.id == client.global.get("image_parameter_id")).length > 0, "Not found in collection");
});
%}

### Test not returned in image collection for admin
GET https://{{host}}/{{version}}/images/{{dev_image_id}}/parameters
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.filter(e => e.id == client.global.get("image_parameter_id")).length > 0, "Not found in collection");
});
%}

### Test not returned in image collection for non-admin
GET https://{{host}}/{{version}}/images/{{dev_image_id}}/parameters
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.filter(e => e.id == client.global.get("image_parameter_id")).length == 0, "Unexpected Parameter found in collection");
});
%}

###
DELETE https://{{host}}/{{version}}/image-parameters/{{image_parameter_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json