### store
POST https://{{host}}/{{version}}/host-groups
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json
X-Reseller-Id: 1

{
    "name": "test host group",
    "vpc_id": "{{dev_vpc_id}}",
    "availability_zone_id" : "{{dev_availability_zone_id}}",
    "host_spec_id" : "{{dev_host_spec_id}}",
    "windows_enabled": true
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('host_group_id', response.body.data.id);
client.log('Host Group ID: ' + response.body.data.id);
%}

### Get Billing Metric - This should be the hostgroup.unallocated
GET https://{{host}}/{{version}}/billing-metrics?resource_id:eq={{host_group_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Get Billing Metric - Unallocated', function () {
    client.assert(response.status === 200, '200 response not received');
    client.global.set('bm_unallocated_id', response.body.data[0].id);
    client.log('Billing Metric (Unallocated) ID: ' + response.body.data[0].id);
});
%}

### Create Host
POST https://{{host}}/{{version}}/hosts
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json
X-Reseller-Id: 1

{
    "name": "test host",
    "host_group_id" : "{{host_group_id}}"
}

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 202, "Response status is not 202");
    client.global.set('host_id', response.body.data.id);
    client.log('Host Group ID: ' + response.body.data.id);
});
%}

### Verify that unallocated billing metric has now ended
GET https://{{host}}/{{version}}/billing-metrics/{{bm_unallocated_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Verify Unallocated Metric has ended', function () {
    client.assert(response.status === 200, '200 response not received');
    client.assert(response.body.data.end !== null, 'End date is still a null value');
});
%}

### Verify that billing metric for host has been created
GET https://{{host}}/{{version}}/billing-metrics?resource_id:eq={{host_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Get Billing Metric - Host', function () {
    client.assert(response.status === 200, '200 response not received');
    client.global.set('bm_host_id', response.body.data[0].id);
    client.log('Billing Metric (Host) ID: ' + response.body.data[0].id);
});
%}

### Delete host
DELETE https://{{host}}/{{version}}/hosts/{{host_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json
X-Reseller-Id: 1

> {%
client.test('Delete host', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}

### Verify that host billing metric has now ended
GET https://{{host}}/{{version}}/billing-metrics/{{bm_host_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Verify Unallocated Metric has ended', function () {
    client.assert(response.status === 200, '200 response not received');
    client.assert(response.body.data.end !== null, 'End date is still a null value');
});
%}

### Verify that unallocated billing metric now exists
GET https://{{host}}/{{version}}/billing-metrics?resource_id:eq={{host_group_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Get Billing Metric - Unallocated', function () {
    client.assert(response.status === 200, '200 response not received');
    let testItem = {};
    // At this point there will be multiple entries so we need to iterate
    response.body.data.forEach(function (item) {
        if (item.key.indexOf('hostgroup.unallocated') > -1 && item.end === null) {
            testItem = item;
            return true;
        }
    });
    client.assert(testItem.end && testItem.end === null, 'Active unallocated metric not found');
});
%}

### Delete HostGroup
DELETE https://{{host}}/{{version}}/host-groups/{{host_group_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json
X-Reseller-Id: 1

> {%
client.test('Delete HostGroup', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}