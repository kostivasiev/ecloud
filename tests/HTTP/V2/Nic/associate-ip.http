# Create an instance
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "vpc_id": "{{dev_vpc_id}}",
    "name": "Cluster IP Test 1",
    "vcpu_cores": 1,
    "ram_capacity": 1024,
    "image_id": "{{dev_image_id}}",
    "requires_floating_ip": false,
    "network_id": "{{dev_network_id}}",
    "volume_capacity": 30,
    "volume_iops": 600
}

> {%
client.global.set("instance_id", response.body.data.id);
client.log("Instance ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Once the instance has finished deploying...get it's NIC
GET https://{{host}}/{{version}}/instances/{{instance_id}}/nics
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.global.set("nic_id", response.body.data[0].id);
client.log("NIC ID: " + response.body.data[0].id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###
GET https://{{host}}/{{version}}/nics/{{nic_id}}/ip-addresses
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response");
  client.assert(response.body.data[0].type === "normal", "Type");
  client.assert(response.body.data.length === 1, "Number of IPs is not 1");

  client.log('Latest IP: ' + response.body.data[0].ip_address);

  nextIp = parseInt(response.body.data[0].ip_address.split('.')[3])+1;

  client.log('Next IP: 10.0.0.' + nextIp);
  client.global.set("next_ip", '10.0.0.' + nextIp);
});
%}

### Create a cluster IP on the same network
POST https://{{host}}/{{version}}/ip-addresses
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Test Cluster IP",
    "ip_address": "{{next_ip}}",
    "network_id": "{{dev_network_id}}",
    "type": "cluster"
}

> {%
client.test('Create', function () {
    client.assert(response.status === 201, '201 response not received');
});
client.global.set('ip_address_id', response.body.data.id);
client.log('IP Address ID: ' + response.body.data.id);
%}


### Associate the cluster Ip with the NIC
POST https://{{host}}/{{version}}/nics/{{nic_id}}/ip-addresses
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "ip_address_id": "{{ip_address_id}}"
}

> {%
client.test('Create', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}

### Once the jobs are complete, check that the IP address was bound to the NIC
GET https://{{host}}/{{version}}/nics/{{nic_id}}/ip-addresses
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response");
  client.assert(response.body.data.length === 2, "Number of IPs is 2");
});
%}

### Dissassociate the IP
DELETE https://{{host}}/{{version}}/nics/{{nic_id}}/ip-addresses/{{ip_address_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json


### Once the jobs are complete, check that the IP address was bound to the NIC
GET https://{{host}}/{{version}}/nics/{{nic_id}}/ip-addresses
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response");
  client.assert(response.body.data.length === 1, "Number of IPs is 1");
});
%}



### Delete the NIC

## First, re-associate the cluster IP using the POST https://{{host}}/{{version}}/nics/{{nic_id}}/ip-addresses endpoint

DELETE https://{{host}}/{{version}}/nics/{{nic_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write

### observe that the RemoveIpAddressBindings job runs


###
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json




