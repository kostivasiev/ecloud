###
# Get Commitment & Set some default variables
GET https://{{host}}/{{version}}/discount-plans
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
var theDate = new Date();
var today = theDate.toISOString().replace(/T/, ' ').replace(/\..+/, '');
theDate.setDate(theDate.getDate() - 1);
var yesterday = theDate.toISOString().replace(/T/, ' ').replace(/\..+/, '');
theDate.setDate(theDate.getDate() + 3);
var day_after_tomorrow = theDate.toISOString().replace(/T/, ' ').replace(/\..+/, '');
theDate.setDate(theDate.getDate() + 1);
var two_days_from_now = theDate.toISOString().replace(/T/, ' ').replace(/\..+/, '');
theDate.setDate(theDate.getDate() + 1);
var three_days_from_now = theDate.toISOString().replace(/T/, ' ').replace(/\..+/, '');
client.global.set('term_start_date', today);
client.global.set('term_end_date', day_after_tomorrow);
client.global.set('yesterday', yesterday);
client.global.set('two_days_from_now', two_days_from_now);
client.global.set('three_days_from_now', three_days_from_now);
client.log('term_start_date = ' + today);
client.log('term_end_date = ' + day_after_tomorrow);
client.log('yesterday = ' + yesterday);
client.log('two_days_from_now = ' + two_days_from_now);
client.log('three_days_from_now = ' + three_days_from_now);
%}

###
# Create Discount Plan (Invalid)
POST https://{{host}}/{{version}}/discount-plans
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "contact_id": 1,
    "orderform_id": "59f38285-faa3-4be9-bab5-b0f0cf31f187",
    "name": "test-commitment",
    "commitment_amount": 2000,
    "commitment_before_discount": 1000,
    "discount_rate": 5,
    "term_length": 24,
    "term_start_date": "{{term_start_date}}",
    "term_end_date": "{{term_start_date}}"
}

> {%
client.test('Test invalid creation', function () {
    client.assert(response.status === 422, '422 response not received');
    client.assert(response.body.errors[0].source === 'term_end_date', 'term_end_date was not received as invalid');
});
%}

###
# Create Discount Plan (Scoped Reseller)
POST https://{{host}}/{{version}}/discount-plans
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-Reseller-Id: 1
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "contact_id": 1,
    "orderform_id": "2add21ef-c30d-4086-83d5-8a5214bca003",
    "name": "test-commitment",
    "commitment_amount": 2000,
    "commitment_before_discount": 1000,
    "discount_rate": 5,
    "term_length": 24,
    "term_start_date": "{{term_start_date}}",
    "term_end_date": "{{term_end_date}}"
}

> {%
client.test('Test Discount Created with scoped reseller', function () {
    client.assert(response.status === 201, '201 Response not received');
    client.global.set('scoped_id', response.body.data.id);
    client.log('Discount Plan Id: ' + response.body.data.id);
});
%}

###
# Get Discount Plan (Admin)
GET https://{{host}}/{{version}}/discount-plans/{{scoped_id}}
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Test reseller_id, contact_id or employee_id in response', function() {
    client.assert(response.body.data.hasOwnProperty('orderform_id'), 'Cannot find orderform_id in output');
    client.assert(response.body.data.hasOwnProperty('reseller_id'), 'Cannot find reseller_id in output');
    client.assert(response.body.data.hasOwnProperty('contact_id'), 'Cannot find contact_id in output');
    client.assert(response.body.data.hasOwnProperty('employee_id'), 'Cannot find employee_id in output');
});
%}

###
# Get Discount Plan (Scoped)
GET https://{{host}}/{{version}}/discount-plans/{{scoped_id}}
Cache-Control: no-cache
X-consumer-custom-id: 1-1
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Test no reseller_id, contact_id or employee_id in response', function() {
    client.assert(response.body.data.hasOwnProperty('orderform_id'), 'Cannot find orderform_id in output');
    client.assert(!response.body.data.hasOwnProperty('reseller_id'), 'Cannot find reseller_id in output');
    client.assert(!response.body.data.hasOwnProperty('contact_id'), 'Cannot find contact_id in output');
    client.assert(!response.body.data.hasOwnProperty('employee_id'), 'Cannot find employee_id in output');
});
%}

###
# Delete Discount Plan (Scoped Reseller)
DELETE https://{{host}}/{{version}}/discount-plans/{{scoped_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Test Discount Deleted', function () {
    client.assert(response.status === 204, '204 Response not received');
});
%}

###
# Create Discount Plan
POST https://{{host}}/{{version}}/discount-plans
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "contact_id": 1,
    "reseller_id": 1,
    "orderform_id": "f5ff7433-b19c-4bf3-b432-c9bfd66e0df0",
    "name": "test-commitment",
    "commitment_amount": 2000,
    "commitment_before_discount": 1000,
    "discount_rate": 5,
    "term_length": 24,
    "term_start_date": "{{term_start_date}}",
    "term_end_date": "{{term_end_date}}"
}

> {%
client.test('Test Discount Created', function () {
    client.assert(response.status === 201, '201 Response not received');
    client.global.set('discount_plan_id', response.body.data.id);
    client.log('Discount Plan Id: ' + response.body.data.id);
});
%}

###
# Get Discount Plans Collection
GET https://{{host}}/{{version}}/discount-plans
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Test Get Collection', function () {
    client.assert(response.status === 200, '200 Response not received');
});
%}

###
# Update Discount Plan with lesser amounts (fails)
PATCH https://{{host}}/{{version}}/discount-plans/{{discount_plan_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "test-discount-plan",
    "commitment_amount": 1000,
    "commitment_before_discount": 500,
    "discount_rate": 5,
    "term_length": 12,
    "term_start_date": "{{yesterday}}",
    "term_end_date": "{{yesterday}}"
}

> {%
client.test('Test Bad Update', function () {
    client.assert(response.status === 422, '422 Response not received');
    // commitment_amount
    client.assert(response.body.errors[0].title === 'Validation Error', 'Error detail title does not match');
    client.assert(response.body.errors[0].detail === 'The commitment amount value must be greater than the value it replaces', 'Error detail message does not match');
    client.assert(response.body.errors[0].source === 'commitment_amount', 'Error detail source does not match');
    // commitment_before_discount
    client.assert(response.body.errors[1].title === 'Validation Error', 'Error detail title does not match');
    client.assert(response.body.errors[1].detail === 'The commitment before discount value must be greater than the value it replaces', 'Error detail message does not match');
    client.assert(response.body.errors[1].source === 'commitment_before_discount', 'Error detail source does not match');
    // term_length
    client.assert(response.body.errors[2].title === 'Validation Error', 'Error detail title does not match');
    client.assert(response.body.errors[2].detail === 'The term length value must be greater than the value it replaces', 'Error detail message does not match');
    client.assert(response.body.errors[2].source === 'term_length', 'Error detail source does not match');
    // term_start_date
    client.assert(response.body.errors[3].title === 'Validation Error', 'Error detail title does not match');
    client.assert(response.body.errors[3].detail === 'The term start date field cannot be a date in the past', 'Error detail message does not match');
    client.assert(response.body.errors[3].source === 'term_start_date', 'Error detail source does not match');
    client.assert(response.body.errors[4].title === 'Validation Error', 'Error detail title does not match');
    client.assert(response.body.errors[4].detail === 'The term start date value must be greater than the value it replaces', 'Error detail message does not match');
    client.assert(response.body.errors[4].source === 'term_start_date', 'Error detail source does not match');
    // term_end_date
    client.assert(response.body.errors[5].title === 'Validation Error', 'Error detail title does not match');
    client.assert(response.body.errors[5].detail === 'The term end date field must be a date after today', 'Error detail message does not match');
    client.assert(response.body.errors[5].source === 'term_end_date', 'Error detail source does not match');
    client.assert(response.body.errors[6].title === 'Validation Error', 'Error detail title does not match');
    client.assert(response.body.errors[6].detail === 'The term end date value must be greater than the value it replaces', 'Error detail message does not match');
    client.assert(response.body.errors[6].source === 'term_end_date', 'Error detail source does not match');
});
%}

###
# Update Discount Plan with correct amounts (passes)
PATCH https://{{host}}/{{version}}/discount-plans/{{discount_plan_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "test-discount-plan",
    "commitment_amount": 2500,
    "commitment_before_discount": 1500,
    "discount_rate": 5,
    "term_length": 36,
    "term_start_date": "{{two_days_from_now}}",
    "term_end_date": "{{three_days_from_now}}"
}

> {%
client.test('Test Update Succeeds', function () {
    client.assert(response.status === 200, '200 Response not received');
});
%}

###
# Get Discount Plan Item
GET https://{{host}}/{{version}}/discount-plans/{{discount_plan_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Test Get Item', function () {
    client.assert(response.status === 200, '200 Response not received');
});
%}

> {%
client.test('Test Get Updated Resource', function () {
    client.assert(response.status === 200, '200 Response not received');
    client.assert(response.body.data.commitment_amount === 2500, 'Commitment Amount is incorrect');
    client.assert(response.body.data.commitment_before_discount === 1500, 'Commitment Discount is incorrect');
});
%}

###
# Delete Discount Plan
DELETE https://{{host}}/{{version}}/discount-plans/{{discount_plan_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Test Discount Deleted', function () {
    client.assert(response.status === 204, '204 Response not received');
});
%}