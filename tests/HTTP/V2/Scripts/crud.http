### Create Software resource
POST https://{{host}}/{{version}}/software
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "test",
    "platform": "Linux",
    "visibility" : "public"
}

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 201, "Response status is not 201");
    client.global.set('software_id', response.body.data.id);
    client.log('software_id: ' + response.body.data.id);
});
%}


### Create Script
POST https://{{host}}/{{version}}/scripts
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test",
  "software_id": "{{software_id}}",
  "sequence" : 1,
  "script" : "exit 0"
}

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 201, "Response status is not 201");
    client.global.set('script_id', response.body.data.id);
    client.log('script_id: ' + response.body.data.id);
});
%}

### Get Collection
GET https://{{host}}/{{version}}/scripts
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data[0].id === client.global.get('script_id'), "Incorrect ID");
});
%}

### Get Item
GET https://{{host}}/{{version}}/scripts/{{script_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.id === client.global.get('script_id'), "Incorrect ID");
  client.assert(response.body.data.name === "test", "Incorrect name");
  client.assert(response.body.data.software_id === client.global.get('software_id'), "Incorrect software_id");
  client.assert(response.body.data.sequence === 1, "Incorrect sequence");
  client.assert(response.body.data.script === "exit 0", "Incorrect script");
});
%}

### Update
PATCH https://{{host}}/{{version}}/scripts/{{script_id}}
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test - RENAMED",
  "sequence" : 2,
  "script" : "exit 2"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### Confirm PATCH changes
GET https://{{host}}/{{version}}/scripts/{{script_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.id === client.global.get('script_id'), "Incorrect ID");
  client.assert(response.body.data.name === "test - RENAMED", "Incorrect name");
  client.assert(response.body.data.software_id === client.global.get('software_id'), "Incorrect software_id");
  client.assert(response.body.data.sequence === 2, "Incorrect sequence");
  client.assert(response.body.data.script === "exit 2", "Incorrect script");
});
%}

### Delete script
DELETE https://{{host}}/{{version}}/scripts/{{script_id}}
X-consumer-custom-id:  {{dev_reseller_id_admin}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}

### Confirm DELETE
GET https://{{host}}/{{version}}/scripts/{{script_id}}
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 404, "Response status is not 404");
});
%}

### Confirm DELETE
GET https://{{host}}/{{version}}/software/{{software_id}}
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 404, "Response status is not 404");
});
%}