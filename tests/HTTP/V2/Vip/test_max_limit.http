### 1. Create Router
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test router",
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}"
}

> {%
client.test("Create Router", function() {
    client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('router_id', response.body.data.id);
client.log('Router ID: ' + response.body.data.id);
%}

### 2. Create Network
POST https://{{host}}/{{version}}/networks
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "router_id": "{{router_id}}",
  "subnet": "192.168.1.1/24"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('network_id', response.body.data.id);
client.log('Network ID: ' + response.body.data.id);
%}

### 3. Create a loadbalancer
POST https://{{host}}/{{version}}/load-balancers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "Test",
  "availability_zone_id": "{{dev_availability_zone_id}}",
  "vpc_id": "{{dev_vpc_id}}",
  "load_balancer_spec_id": "{{dev_load_balancer_spec_id}}",
  "network_ids": [
      "{{network_id}}"
  ]
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('load_balancer_id', response.body.data.id);
client.log('Load Balancer ID: ' + response.body.data.id);
%}

### 4. Create first Vip (should pass)
POST https://{{host}}/{{version}}/vips
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "load_balancer_id" : "{{load_balancer_id}}",
  "network_id": "{{network_id}}",
  "allocate_floating_ip": true
}
> {%
client.test('Create', function () {
    client.global.set('vip_id_1', response.body.data.id);
    client.assert(response.status === 202, '202 response not received');
});
%}

### 5. Create second Vip (should pass)
POST https://{{host}}/{{version}}/vips
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "load_balancer_id" : "{{load_balancer_id}}",
  "network_id": "{{network_id}}",
  "allocate_floating_ip": true
}
> {%
client.test('Create', function () {
    client.global.set('vip_id_2', response.body.data.id);
    client.assert(response.status === 202, '202 response not received');
});
%}

### 6. Create third Vip (should fail)
POST https://{{host}}/{{version}}/vips
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "load_balancer_id" : "{{load_balancer_id}}",
  "network_id": "{{network_id}}",
  "allocate_floating_ip": true
}
> {%
client.test('Create', function () {
    client.assert(response.status === 403, '403 response not received');
});
%}

### 7. Delete second Vip
DELETE https://{{host}}/{{version}}/vips/{{vip_id_2}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### 7. Delete first Vip
DELETE https://{{host}}/{{version}}/vips/{{vip_id_1}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### 8. Delete Loadbalancer
DELETE https://{{host}}/{{version}}/load-balancers/{{load_balancer_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}

### 9. Delete Network
DELETE https://{{host}}/{{version}}/networks/{{network_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### 10. Delete Router
DELETE https://{{host}}/{{version}}/routers/{{router_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}