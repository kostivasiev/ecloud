### Create Router (to deploy management networking)
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test router",
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}"
}

> {%
client.test("Create Router", function() {
    client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('router_id', response.body.data.id);
client.log('Router ID: ' + response.body.data.id);
%}

### Get load balancer spec
GET https://{{host}}/{{version}}/load-balancer-specs?name:eq=medium
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Get load balancer specification', function () {
    client.assert(response.status === 200, 'Response status is not 200');
});

client.global.set('load_balancer_spec_id', response.body.data[0].id);
client.log('Load Balancer Spec ID: ' + response.body.data[0].id);
%}

### Create Loadbalancer
POST https://{{host}}/{{version}}/load-balancers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "Test",
  "availability_zone_id": "{{dev_availability_zone_id}}",
  "vpc_id": "{{dev_vpc_id}}",
  "load_balancer_spec_id": "{{load_balancer_spec_id}}"
}

> {%
client.test("Create Loadbalancer", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('load_balancer_id', response.body.data.id);
client.log('Load Balancer ID: ' + response.body.data.id);
%}

### Get Loadbalancer Data
GET https://{{host}}/{{version}}/load-balancers/{{load_balancer_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Get Loadbalancer Data", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.config_id !== 0, 'Loadbalancer cluster not created successfully');
  client.log('In the loadbalancer database run the following query:-');
  client.log('SELECT * FROM `configuration` WHERE `id` = \'' + response.body.data.config_id + '\';');
});
%}

### Check Keepalived credential was created
GET https://{{host}}/{{version}}/credentials/?resource_id:eq={{load_balancer_id}}&name:eq=keepalived
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Check keepalived credential was created", function () {
    client.assert(response.status === 200, 'Response status is not 200');
    client.assert(response.body.meta.pagination.total === 1, 'No records retrieved');
});
%}

### Check Stats credential was created
GET https://{{host}}/{{version}}/credentials/?resource_id:eq={{load_balancer_id}}&name:eq=haproxy%20stats
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Check Stats credential was created", function () {
    client.assert(response.status === 200, 'Response status is not 200');
    client.assert(response.body.meta.pagination.total === 1, 'No records retrieved');
});
%}

### Delete the loadbalancer
DELETE https://{{host}}/{{version}}/load-balancers/{{load_balancer_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Delete the loadbalancer", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}

### Verify no credentials exist for loadbalancer
GET https://{{host}}/{{version}}/credentials?resource_id:eq={{load_balancer_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Verify no credentials exist for loadbalancer', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.meta.pagination.total === 0, 'Credentials were found');
})
%}

### Delete the router
DELETE https://{{host}}/{{version}}/routers/{{router_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Delete the router", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}