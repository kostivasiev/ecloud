### Pre-requesit is that management networking is deployed
### Create Router (to deploy management networking)
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test router",
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}"
}

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 202, "Response status is not 202");
});
client.global.set('router_id', response.body.data.id);
client.log('Router ID: ' + response.body.data.id);
%}

###
GET https://{{host}}/{{version}}/load-balancer-specs?name:eq=medium
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.global.set('load_balancer_spec_id', response.body.data[0].id);
client.log('Load Balancer Spec ID: ' + response.body.data[0].id);
%}

###
POST https://{{host}}/{{version}}/load-balancers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "Test",
  "availability_zone_id": "{{dev_availability_zone_id}}",
  "vpc_id": "{{dev_vpc_id}}",
  "load_balancer_spec_id": "{{load_balancer_spec_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('load_balancer_id', response.body.data.id);
client.log('Load Balancer ID: ' + response.body.data.id);
%}

###

GET https://{{host}}/{{version}}/load-balancers/{{load_balancer_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.id == client.global.get('load_balancer_id'), "Incorrect resource ID returned");
  client.assert(response.body.data.nodes === 2, "Incorrect node count");
});
%}

### Clean up

## Get the instance ID's here so we can delete them
GET https://{{host}}/{{version}}/load-balancers/{{load_balancer_id}}/nodes
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###
DELETE https://{{host}}/{{version}}/load-balancers/{{load_balancer_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
DELETE https://{{host}}/{{version}}/routers/{{router_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json