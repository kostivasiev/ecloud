### 1. Create a VPC
POST https://{{host}}/{{version}}/vpcs
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "Mismatch Test",
    "region_id": "{{dev_region_id}}"
}

> {%
client.test('Create VPC', function () {
    client.assert(response.status === 202, '202 Response Not Received');
});
client.global.set('vpc_id', response.body.data.id);
client.log('VPC Id : ' + response.body.data.id);
%}

### 2. Create a volume group on default vpc
POST https://{{host}}/{{version}}/volume-groups
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Test Volume Group",
    "availability_zone_id": "{{dev_availability_zone_id}}",
    "vpc_id": "{{dev_vpc_id}}"
}

> {%
client.test('Create Volume Group', function () {
    client.assert(response.status === 202, '202 response not received');
});
client.global.set('volume_group_id', response.body.data.id);
client.log('Volume Group ID: ' + response.body.data.id);
%}

### 2. Create a volume and attach to volume group
POST https://{{host}}/{{version}}/volumes
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "Test",
  "vpc_id": "{{vpc_id}}",
  "capacity": 25,
  "availability_zone_id": "{{dev_availability_zone_id}}",
  "volume_group_id": "{{volume_group_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 422, "Response status is not 422");
});

client.global.set('volume_id', response.body.data.id);
client.log('Volume ID: ' + response.body.data.id);
%}

### 4. Create shared volume
POST https://{{host}}/{{version}}/volumes
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "Test",
  "vpc_id": "{{vpc_id}}",
  "capacity": 25,
  "availability_zone_id": "{{dev_availability_zone_id}}",
  "is_shared": true
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('volume_id', response.body.data.id);
client.log('Volume ID: ' + response.body.data.id);
%}

### 5. Attach volume to volume group
PATCH https://{{host}}/{{version}}/volumes/{{volume_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "volume_group_id": "{{volume_group_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 422, "Response status is not 422");
});
%}

### 5. Delete Volume Group
DELETE https://{{host}}/{{version}}/volume-groups/{{volume_group_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

### 6. Delete Volume
DELETE https://{{host}}/{{version}}/volumes/{{volume_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

### 7. Delete VPC
DELETE https://{{host}}/{{version}}/vpcs/{{vpc_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json