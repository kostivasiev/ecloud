### Create Volume Group
POST https://{{host}}/{{version}}/volume-groups
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Unit Test Volume Group",
    "availability_zone_id": "{{dev_availability_zone_id}}",
    "vpc_id": "{{dev_vpc_id}}"
}

> {%
client.test('Create Volume Group', function () {
    client.assert(response.status === 202, '202 response not received');
});
client.global.set('volume_group_id', response.body.data.id);
client.log('Volume Group ID: ' + response.body.data.id);
%}

### Create Instance
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "vpc_id": "{{dev_vpc_id}}",
    "name": "Test",
    "vcpu_cores": 1,
    "ram_capacity": 1024,
    "image_id": "{{dev_image_id}}",
    "network_id": "{{dev_network_id}}",
    "volume_capacity": 30,
    "volume_iops": 600
}

> {%
client.global.set("instance_id", response.body.data.id);
client.log("Instance ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Assign Volume Group to Instance
PATCH https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "volume_group_id": "{{volume_group_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Create Volume
POST https://{{host}}/{{version}}/volumes
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "name": "Test Volume",
  "vpc_id": "{{dev_vpc_id}}",
  "capacity": 25,
  "availability_zone_id": "{{dev_availability_zone_id}}",
  "is_shared": true
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('volume_id', response.body.data.id);
client.log('Volume ID: ' + response.body.data.id);
%}

### Assign Volume to Volume Group
PATCH https://{{host}}/{{version}}/volumes/{{volume_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "volume_group_id": "{{volume_group_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Check Instance has Volume attached
GET https://{{host}}/{{version}}/instances/{{instance_id}}/volumes
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Check volume has been mounted', function () {
    client.assert(response.status === 200, '200 response not received');
    var data = response.body.data;
    var found = false;
    for (k=0; k < data.length; k++) {
        if (data[k].id === client.global.get('volume_id')) {
            found = true;
            k = data.length;
        }
    }
    client.assert(found === true, 'Volume was not found');
});
%}

### Remove Volume from Volume Group
PATCH https://{{host}}/{{version}}/volumes/{{volume_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "volume_group_id": null
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Check Instance does not have volume
GET https://{{host}}/{{version}}/instances/{{instance_id}}/volumes
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Check volume has been mounted', function () {
    client.assert(response.status === 200, '200 response not received');
    var data = response.body.data;
    var found = false;
    for (k=0; k < data.length; k++) {
        if (data[k].id === client.global.get('volume_id')) {
            found = true;
            k = data.length;
        }
    }
    client.assert(found === false, 'Volume was found');
});
%}

### Delete Volume Group
DELETE https://{{host}}/{{version}}/volume-groups/{{volume_group_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Delete Volume Group Item', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}

### Delete Instance
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Delete Volume Group Item', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}

### Delete Volume
DELETE https://{{host}}/{{version}}/volumes/{{volume_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}