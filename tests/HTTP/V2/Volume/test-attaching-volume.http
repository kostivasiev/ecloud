###
# Create Instance
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 1,
  "ram_capacity": 1024,
  "appliance_id": "6e12d729-ca82-49f9-89d2-eec2360c482a",
  "requires_floating_ip": true,
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 30
}

> {%
client.test("SETUP: Create Instance", function() {
    client.assert(response.status === 201, "Response status is not 201 Created");
    client.global.set("instance_id", response.body.data.id);
    client.log("Instance ID: " + response.body.data.id);
});
%}

###
# Get Instance Information - Check the sync-state
GET https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type:  application/json

> {%
client.test('SETUP: Check Instance Status', function () {
    client.assert(response.status === 200, '200 Response not received');
    client.assert(response.body.data.sync === 'complete', 'Sync Status is not yet complete');
});
%}

###
# Get Volume Information
GET https://{{host}}/{{version}}/instances/{{instance_id}}/volumes
X-consumer-custom-id:  0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type:  application/json

> {%
client.test('SETUP: Get Volume Information', function () {
    client.assert(response.status === 200, '200 response not received');
    client.assert(response.body.data.length > 0, 'No volumes returned in results');
    if (response.body.data.length > 0) {
        client.global.set('volume_id', response.body.data[0].id);
        client.global.set('volume_uuid', response.body.data[0].vmware_uuid);
        client.log('Volume ID: ' + response.body.data[0].id);
        client.log('Volume VMWare UUID: ' + response.body.data[0].vmware_uuid);
    }
});
%}

###
# Detach Volume
POST https://mgmt-20.ecloud-service.ukfast.co.uk:8443/api/v2/vpc/{{dev_vpc_id}}/instance/{{instance_id}}/volume/{{volume_uuid}}/detach
Accept: application/json
Content-Type: application/json
Authorization: Basic {{kingpin_auth}}

> {%
client.test('SETUP: Detach Volume', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

###
# Attach Volume (Will Fail)
POST https://{{host}}/{{version}}/volumes/{{volume_id}}/attach
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json

{
    "instance_id": "{{instance_id}}"
}

> {%
client.test('Attach Volume (Failure)', function () {
    client.assert(response.status === 400, "400 Response not received");
    client.log('Execute the following SQL:-');
    client.log('DELETE FROM instance_volume WHERE instance_id = \'' + client.global.get('instance_id') + '\';');
});
%}

###
# Attach Volume (Will Succeed)
POST https://{{host}}/{{version}}/volumes/{{volume_id}}/attach
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json

{
    "instance_id": "{{instance_id}}"
}

> {%
client.test('Attach Volume (Failure)', function () {
    client.assert(response.status === 202, "202 Response not received");
});
%}

###
# Verify Volume Attached
GET https://{{host}}/{{version}}/instances/{{instance_id}}/volumes
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json

> {%
client.test('Test Volume has been attached', function () {
    const volumeId = client.global.get('volume_id');
    function checkVolumePresent(arr, value) {
        return arr.some(function (arrValue) {
            return value === arrValue;
        });
    }
    client.assert(
        checkVolumePresent(response.body.data, volumeId) === true,
        'Could not find ' + volumeId + ' in returned volume list'
    );
    client.assert(response.status === 200, '200 response not received');
});
%}

###
# Cleanup - Delete Instance
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json

> {%
client.test('CLEANUP: Delete Instance', function () {
    client.assert(response.status === 204, '204 response not received');
});
%}

###
# Cleanup - Get Instance
GET https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json

> {%
client.test('CLEANUP: Check instance has been deleted', function () {
    client.assert(response.status === 404, '404 response not received');
});
%}


