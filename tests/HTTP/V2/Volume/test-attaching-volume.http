###
# Create Instance
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 1,
  "ram_capacity": 1024,
  "appliance_id": "6e12d729-ca82-49f9-89d2-eec2360c482a",
  "requires_floating_ip": true,
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 30
}

> {%
client.test("SETUP: Create Instance", function() {
    client.assert(response.status === 201, "Response status is not 201 Created");
    client.global.set("instance_id", response.body.data.id);
    client.log("Instance ID: " + response.body.data.id);
});
%}

###
# Create Volume
POST https://{{host}}/{{version}}/volumes
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json

{
  "name": "Test",
  "vpc_id": "{{dev_vpc_id}}",
  "capacity": 25,
  "availability_zone_id": "{{dev_availability_zone_id}}"
}

> {%
client.test("SETUP: Create Volume", function() {
    client.assert(response.status === 201, "Response status is not 201 Created");
    client.global.set("volume_id", response.body.data.id);
    client.log("Volume ID: " + response.body.data.id);
});
%}

###
# Attach Volume
PUT https://{{host}}/{{version}}/volumes/vol-8ec00258/attach
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json

{
    "instance_id": "i-2458216d"
}

> {%
client.test('Attach Volume', function () {
    client.assert(response.status === 202, "202 Response not received");
});
%}

###
# Verify Volume Attached
GET https://{{host}}/{{version}}/instances/i-2458216d/volumes
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json

> {%
client.test('Test Volume is present', function () {
    const volumeId = client.global.get('volume_id');
    function checkVolumePresent(arr, value) {
        return arr.some(function (arrValue) {
            return value === arrValue;
        });
    }
    client.assert(
        checkVolumePresent(response.body.data, volumeId) === true,
        'Could not find ' + volumeId + ' in returned volume list'
    );
    client.assert(response.status === 200, '200 response not received');
});
%}

###
# Cleanup - Delete Volume
DELETE https://{{host}}/{{version}}/volumes/{{volume_id}}
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json

###
# Cleanup - Delete Instance
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json

###
# Cleanup - Get Instance
GET https://{{host}}/{{version}}/instances
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json


###

# curl -X POST "https://mgmt-20.ecloud-service.ukfast.co.uk:8443/api/v2/vpc/vpc-aaaaaaaa/instance/i-2458216d/volume/attach" -H "Authorization: Basic a2luZ3BpbmFwaTp0S20/Yzc/T3Yhb2Y=" -H  "accept: application/json" -H  "Content-Type: application/json" -d "{  \"volumeUUID\": \"9db01446-dfcd-4045-9563-d5e1501fa513\",  \"shared\": true,  \"unitNumber\": 0}"
POST https://mgmt-20.ecloud-service.ukfast.co.uk:8443/api/v2/vpc/vpc-aaaaaaaa/instance/i-2458216d/volume/attach
Accept: application/json
Content-Type: application/json
Authorization: Basic a2luZ3BpbmFwaTp0S20/Yzc/T3Yhb2Y=

{
    "volumeUUID": "9db01446-dfcd-4045-9563-d5e1501fa513",
    "shared": true,
    "unitNumber": 0
}

###
GET https://{{host}}/{{version}}/instances/i-2458216d
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
X-Reseller-Id: 1
Content-Type: application/json


