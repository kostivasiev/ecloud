### 1. Create Network
POST https://{{host}}/{{version}}/networks
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "router_id": "{{dev_router_id}}",
  "subnet": "172.22.2.0/29"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('network_id', response.body.data.id);
client.log('Network ID: ' + response.body.data.id);
%}

### 2. Create IP Address
POST https://{{host}}/{{version}}/ip-addresses
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Test",
    "ip_address": "172.22.2.2",
    "network_id": "{{network_id}}",
    "type": "cluster"
}

> {%
client.test('Create', function () {
    client.assert(response.status === 201, '201 response not received');
});
client.global.set('ip_address_id', response.body.data.id);
client.log('IP Address ID: ' + response.body.data.id);
%}

### 3. Get Ip Address Collection
GET https://{{host}}/{{version}}/ip-addresses
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Get Collection', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

### 4. Get Ip Address Collection filtered by type
GET https://{{host}}/{{version}}/ip-addresses?type:eq=cluster
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Get Collection', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

### 5. Get Ip Address Resource
GET https://{{host}}/{{version}}/ip-addresses/{{ip_address_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Get Collection', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

### 6. Delete Ip Address Resource (should fail)
DELETE https://{{host}}/{{version}}/ip-addresses/{{ip_address_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Delete failed', function () {
    client.assert(response.status === 401, '401 response not received');
});
%}

### 6. Delete Ip Address Resource (should pass)
DELETE https://{{host}}/{{version}}/ip-addresses/{{ip_address_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Delete succeeded', function () {
    client.assert(response.status === 204, '204 response not received');
});
%}

### 7. Delete Network
DELETE https://{{host}}/{{version}}/networks/{{network_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Delete succeeded', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}