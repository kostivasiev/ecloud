### 1. check task is returned
POST https://{{host}}/{{version}}/ip-addresses
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Test",
    "ip_address": "10.0.0.3",
    "network_id": "{{dev_network_id}}"
}

> {%
client.test('Create', function () {
    client.assert(response.status === 201, '201 response not received');
});
client.global.set('ip_address_id', response.body.data.id);
client.log('IP Address ID: ' + response.body.data.id);
%}

### 2. check for sync
GET https://{{host}}/{{version}}/ip-addresses?sort=ip_address:desc
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Get Collection', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

### 3. check sync is returned
GET https://{{host}}/{{version}}/ip-addresses/{{ip_address_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Get Item', function () {
    client.assert(response.status === 200, '200 response not received');
    client.assert(response.body.data.id === client.global.get('ip_address_id'), 'Invalid ID');
    client.assert(response.body.data.ip_address === '1.1.1.1', 'Invalid ip_address');
    client.assert(response.body.data.network_id === 'net-aaaaaaaa', 'Invalid network_id');
    client.assert(response.body.data.type === 'cluster', 'Invalid type');
});
%}

### 4. check task returned
PATCH https://{{host}}/{{version}}/ip-addresses/{{ip_address_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Test - Renamed",
    "ip_address": "2.2.2.2",
    "type": "normal"
}

> {%
client.test('Update Volume Group', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}

### 5. check updated and has sync
GET https://{{host}}/{{version}}/ip-addresses/{{ip_address_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Get Item', function () {
    client.assert(response.status === 202, '202 response not received');
    client.assert(response.body.data.name === 'Test - Renamed', 'Name was not updated');
    client.assert(response.body.data.ip_address === '2.2.2.2', 'ip_address was not updated');
    client.assert(response.body.data.type === 'dhcp', 'type was not updated');
});
%}

### 6. check task created for deleting
DELETE https://{{host}}/{{version}}/ip-addresses/{{ip_address_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Delete Item', function () {
    client.assert(response.status === 204, '204 response not received');
});
%}



