###
# Create a network with duplicate subnet
POST https://{{host}}/{{version}}/networks
X-consumer-custom-id:  1-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "cidr-tests",
    "router_id": "{{dev_router_id}}",
    "subnet": "10.0.0.1/24"
}

> {%
client.test("Test existing cidr cannot be reused", function () {
    client.assert(response.status === 422, "Response was not 422");
    client.assert(response.body.errors[0].detail === "The subnet is already assigned to another network", "Error message not found");
});
%}

###
# Create a network with public subnet
POST https://{{host}}/{{version}}/networks
X-consumer-custom-id:  1-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "cidr-tests",
    "router_id": "{{dev_router_id}}",
    "subnet": "208.97.176.25/24"
}

> {%
client.test("Test existing cidr cannot be reused", function () {
    client.assert(response.status === 422, "Response was not 422");
    client.assert(response.body.errors[0].detail === "The subnet must be a private CIDR subnet", "Error message not found");
});
%}

###
# Create a network with overlapping subnet
POST https://{{host}}/{{version}}/networks
X-consumer-custom-id:  1-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "cidr-tests",
    "router_id": "{{dev_router_id}}",
    "subnet": "10.0.0.1/30"
}

> {%
client.test("Test existing cidr cannot be reused", function () {
    client.assert(response.status === 422, "Response was not 422");
    client.assert(response.body.errors[0].detail === "The subnet must not overlap another CIDR subnet", "Error message not found");
});
%}

###
# Update a network with duplicate subnet
PATCH https://{{host}}/{{version}}/networks/net-0c140ffc
X-consumer-custom-id:  1-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "subnet": "10.0.0.0/24"
}

> {%
client.test("Test existing cidr cannot be reused", function () {
    client.assert(response.status === 422, "Response was not 422");
    client.assert(response.body.errors[0].detail === "The subnet is already assigned to another network", "Error message not found");
});
%}

###
# Update a network with public subnet
PATCH https://{{host}}/{{version}}/networks/net-0c140ffc
X-consumer-custom-id:  1-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "subnet": "208.97.176.25/24"
}

> {%
client.test("Test existing cidr cannot be reused", function () {
    client.assert(response.status === 422, "Response was not 422");
    client.assert(response.body.errors[0].detail === "The subnet must be a private CIDR subnet", "Error message not found");
});
%}

###
# Update a network with public subnet
PATCH https://{{host}}/{{version}}/networks/net-0c140ffc
X-consumer-custom-id:  1-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "subnet": "10.0.0.0/30"
}

> {%
client.test("Test existing cidr cannot be reused", function () {
    client.assert(response.status === 422, "Response was not 422");
    client.assert(response.body.errors[0].detail === "The subnet must not overlap another CIDR subnet", "Error message not found");
});
%}