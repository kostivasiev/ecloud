###
# First create a router
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test router",
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}"
}

> {%
client.global.set('router1_id', response.body.data.id);
client.log('Router 1 ID: ' + response.body.data.id);
client.test('Test Create of 1st Router', function () {
    client.assert(response.status === 202, '202 Status not received');
});
%}

###
# Now create a network using this router
POST https://{{host}}/{{version}}/networks
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "router_id": "{{router1_id}}",
  "subnet": "172.17.2.0/29"
}

> {%
client.global.set('network1_id', response.body.data.id);
client.log('Network 1 ID: ' + response.body.data.id);
client.test('Test Create of 1st Network', function () {
    client.assert(response.status === 202, '202 Status not received');
});
%}

###
# Now create a 2nd router
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test router 2",
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}"
}

> {%
client.global.set('router2_id', response.body.data.id);
client.log('Router 2 ID: ' + response.body.data.id);
client.test('Test Create of 2nd Router', function () {
    client.assert(response.status === 202, '202 Status not received');
});
%}

###
# Now create a 2nd network using the 2nd router but same subnet as the first
POST https://{{host}}/{{version}}/networks
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "router_id": "{{router2_id}}",
  "subnet": "172.17.2.0/29"
}

> {%
client.global.set('network2_id', response.body.data.id);
client.log('Network 2 ID: ' + response.body.data.id);
client.test('Test Create of 2nd Network', function () {
    client.assert(response.status === 202, '202 Status not received');
});
%}

###
# Test Update of 2nd Network using same details
PATCH https://{{host}}/{{version}}/networks/{{network2_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "subnet": "172.17.2.0/29"
}

> {%
client.test('Test update of 2nd Network', function () {
    client.assert(response.status === 202, '202 Status not received');
});
%}

###
# Test creation of a 3rd network that overlaps the 2nd
POST https://{{host}}/{{version}}/networks
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "router_id": "{{router2_id}}",
  "subnet": "172.17.2.0/29"
}

> {%
client.test('Test fail of overlapping network', function () {
    client.assert(response.status === 422, '422 Status not received');
});
%}


###
# Cleanup
DELETE https://{{host}}/{{version}}/networks/{{network2_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
DELETE https://{{host}}/{{version}}/routers/{{router2_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
DELETE https://{{host}}/{{version}}/networks/{{network1_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
DELETE https://{{host}}/{{version}}/routers/{{router1_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json