### Create Router
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test router",
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}"
}

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 201, "Response status is not 201");
});
client.global.set('router_id', response.body.data.id);
client.log('Router ID: ' + response.body.data.id);
%}

###
# Create Policy
POST https://{{host}}/{{version}}/firewall-policies
X-consumer-custom-id:  1-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "name": "Test Policy - Delete Rules",
  "sequence": 10,
  "router_id": "{{router_id}}"
}

> {%
client.global.set('firewall_policy_id', response.body.data.id);
client.log('Firewall Policy ID: ' + response.body.data.id);
%}

###
# Get Policy Collection
GET https://{{host}}/{{version}}/firewall-policies
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###
# Get Policy Item
GET https://{{host}}/{{version}}/firewall-policies/{{firewall_policy_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.id === client.global.get('firewall_policy_id'), "Incorrect resource ID returned");
  client.assert(response.body.data.name === "Test Policy", "name is not correct");
  client.assert(response.body.data.router_id === "rtr-aaaaaaaa", "Incorrect router id");
  client.assert(response.body.data.sequence === 10, "Sequence id not correct");
  client.assert(response.body.data.locked === false, "Locked state is incorrect");
});
%}

###
# Lock the policy
PUT https://{{host}}/{{version}}/firewall-policies/{{firewall_policy_id}}/lock
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

###
# Get the resource again
GET https://{{host}}/{{version}}/firewall-policies/{{firewall_policy_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.locked === true, "Locked state is incorrect");
});
%}

### Patch locked resource (should fail)
PATCH https://{{host}}/{{version}}/firewall-policies/{{firewall_policy_id}}
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Updated Policy Name"
}

###

PATCH https://{{host}}/{{version}}/firewall-policies/{{firewall_policy_id}}
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "Updated Policy Name"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
  client.assert(response.body.data.id === client.global.get('firewall_policy_id'), "Incorrect resource ID returned");
});
%}

###
# Delete Policy
DELETE https://{{host}}/{{version}}/firewall-policies/{{firewall_policy_id}}
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}