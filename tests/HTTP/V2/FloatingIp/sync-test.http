###
# Setup Dependancies
#
# Create Region
POST https://{{host}}/{{version}}/regions
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "Test Region - LbcCrud"
}

> {%
client.global.set('region_id', response.body.data.id);
client.log('Region ID: ' + response.body.data.id);
%}

###
# Create Availability Zone
POST https://{{host}}/{{version}}/availability-zones
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "code": "MAN1",
  "name": "Test availability zone (v)",
  "datacentre_site_id": 8,
  "nsx_manager_endpoint": "https://185.197.63.88/",
  "nsx_edge_cluster_id": "8bc61267-583e-4988-b5d9-16b46f7fe900",
  "region_id": "{{region_id}}"
}

> {%
client.global.set('availability_zone_id', response.body.data.id);
client.log('Availability Zone ID: ' + response.body.data.id);
%}

###
# Create Credentials
POST https://{{host}}/{{version}}/credentials
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "NSX",
  "resource_id": "{{availability_zone_id}}",
  "host": "https://185.197.63.88",
  "username": "ecloud.api@ecloudgov.dev",
  "password": "a5hfysIVpUND"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 200");
});

client.global.set('nsx_credential_id', response.body.data.id);
client.log('NSX Credential ID: ' + response.body.data.id);
%}

###
# Create VPC
POST https://{{host}}/{{version}}/vpcs
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json
X-Reseller-Id: 1

{
  "region_id": "{{region_id}}"
}

> {%
client.global.set('vpc_id', response.body.data.id);
client.log('VPC UUID: ' + response.body.data.id);
%}

###
# Create Router
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "vpc_id": "{{vpc_id}}",
  "availability_zone_id": "{{availability_zone_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 200");
});

client.global.set('router_id', response.body.data.id);
client.log('Router ID: ' + response.body.data.id);
%}

###
# Create Network
POST https://{{host}}/{{version}}/networks
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "router_id": "{{router_id}}",
  "subnet": "10.0.0.0/24"
}


> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 200");
});

client.global.set('network_id', response.body.data.id);
client.log('Network ID: ' + response.body.data.id);
%}

###
# Create Instance
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{vpc_id}}",
  "availability_zone_id": "{{availability_zone_id}}",
  "appliance_id": "eed603bf-d40e-47d7-bb98-66d2940e0dc2",
  "vcpu_cores": 1,
  "ram_capacity": 1024
}

> {%
client.global.set("instance_id", response.body.data.id);
client.log("Instance ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201 Created");
});
%}

###
# Create NIC
POST https://{{host}}/{{version}}/nics
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "mac_address": "3D:F2:C9:A6:B3:4F",
  "instance_id": "{{instance_id}}",
  "network_id": "{{network_id}}",
  "ip_address": "10.0.0.5"
}

> {%
client.global.set("nic_id", response.body.data.id);
client.log("Nic ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###
# Create Floating IP
POST https://{{host}}/{{version}}/floating-ips
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "vpc_id": "{{vpc_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 200");
});

client.global.set('fip_id', response.body.data.id);
client.log('Floating IP ID: ' + response.body.data.id);
%}

###
# Assign floating ip
POST https://{{host}}/{{version}}/floating-ips/{{fip_id}}/assign
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "resource_id": "{{nic_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

###
# Check sync attribute
GET https://{{host}}/{{version}}/floating-ips/{{fip_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
# Unassign floating ip
POST https://{{host}}/{{version}}/floating-ips/{{fip_id}}/unassign
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "resource_id": "{{nic_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

###
# Delete Floating IP
DELETE https://{{host}}/{{version}}/floating-ips/{{fip_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
# DELETE NIC
DELETE https://{{host}}/{{version}}/nics/{{nic_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
# DELETE Instance
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

###
# DELETE Network
POST https://{{host}}/{{version}}/networks/{{network_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
# DELETE Router
POST https://{{host}}/{{version}}/routers/{{router_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###

DELETE https://{{host}}/{{version}}/vpcs/{{vpc_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###

DELETE https://{{host}}/{{version}}/credentials/{{nsx_credential_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###

DELETE https://{{host}}/{{version}}/availability-zones/{{availability_zone_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

###

DELETE https://{{host}}/{{version}}/regions/{{region_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json