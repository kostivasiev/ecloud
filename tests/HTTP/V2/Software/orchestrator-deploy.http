### 1. Create Orchestrator Config
POST https://{{host}}/{{version}}/orchestrator-configs
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "reseller_id": 7052,
    "employee_id": 1
}

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 201, "Response status is not 201");
});

client.global.set("orchestrator_config_id", response.body.data.id);
client.log("Builder Configuration ID: " + response.body.data.id);
%}

### 2. Add Data to Config
POST https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}/data
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "instances": [
        {
            "name": "Software Test Instance",
            "vpc_id": "{{dev_vpc_id}}",
            "image_id": "{{dev_image_id}}",
            "vcpu_cores": 1,
            "ram_capacity": 1024,
            "locked": false,
            "backup_enabled": false,
            "network_id": "{{dev_network_id}}",
            "volume_capacity": 30,
            "volume_iops": 300,
            "ssh_key_pair_ids": [
                "ssh-aaaaaaaa"
            ],
            "software_ids": [
                "soft-aaaaaaaa"
            ]
        }
    ]
}

> {%

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 3. Deploy Config
POST https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}/deploy
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 202, "Response status is not 202");
});

client.global.set("orchestrator_build_id", response.body.data.id);
client.log("orchestrator_build_id: " + response.body.data.id);
%}

### 4. Get Orchestrator Build Information
GET https://{{host}}/{{version}}/orchestrator-builds/{{orchestrator_build_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 200, "Response status is not 200");
});
client.global.set("instance_id", response.body.data.state.instance[0]);
client.log("instance_id: " + response.body.data.state.instance[0]);
%}

### 5. Get Instance Data
GET https://{{host}}/{{version}}/instances/{{instance_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 200, 'Response status is not 200');
    client.assert(response.body.data.sync.status === 'complete', 'Instance deployment has not completed');
});
%}

### Cleanup

### 6. Delete Instance
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 202, 'Response status is not 202');
});
%}

### 7. Delete Orchestrator Config
DELETE https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 204, 'Response status is not 204');
});
%}