### 1. Create a Volume Group
POST https://{{host}}/{{version}}/volume-groups
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Attach Detach Test Volume Group",
    "availability_zone_id": "{{dev_availability_zone_id}}",
    "vpc_id": "{{dev_vpc_id}}"
}

> {%
client.test('Create Volume Group', function () {
    client.assert(response.status === 202, '202 response not received');
});
client.global.set('volume_group_id', response.body.data.id);
client.log('Volume Group ID: ' + response.body.data.id);
%}

### 2. Create a Volume
POST https://{{host}}/{{version}}/volumes
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "Test",
  "vpc_id": "{{dev_vpc_id}}",
  "capacity": 25,
  "availability_zone_id": "{{dev_availability_zone_id}}",
  "volume_group_id": "{{volume_group_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('volume_id', response.body.data.id);
client.log('Volume ID: ' + response.body.data.id);
%}

### 2a. Create a Secondary Volume
POST https://{{host}}/{{version}}/volumes
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "VG Test 2",
  "vpc_id": "{{dev_vpc_id}}",
  "capacity": 25,
  "availability_zone_id": "{{dev_availability_zone_id}}",
  "volume_group_id": "{{volume_group_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('secondary_volume_id', response.body.data.id);
client.log('Secondary Volume ID: ' + response.body.data.id);
%}

### 3. Create a Primary Instance
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "vpc_id": "{{dev_vpc_id}}",
    "name": "Test",
    "vcpu_cores": 1,
    "ram_capacity": 1024,
    "image_id": "{{dev_image_id}}",
    "network_id": "{{dev_network_id}}",
    "volume_capacity": 30
}

> {%
client.global.set('primary_instance_id', response.body.data.id);
client.log('Primary Instance ID: ' + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### 4. Create a Secondary Instance
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 1,
  "ram_capacity": 1024,
  "image_id": "{{dev_image_id}}",
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 30
}

> {%
client.global.set('secondary_instance_id', response.body.data.id);
client.log('Secondary Instance ID: ' + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### 4a. Attach the volume group to Primary Instance
PATCH https://{{host}}/{{version}}/instances/{{primary_instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "volume_group_id": "{{volume_group_id}}"
}

> {%
client.test('Attach the volume group to Primary Instance', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}

### 5. Check Volume is attached to Primary Instance
GET https://{{host}}/{{version}}/instances/{{primary_instance_id}}/volumes
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Get volumes for Primary Instance', function () {
    client.assert(response.status === 200, '200 response not received');
    var data = response.body.data;
    var found = false;
    for (k=0; k < data.length; k++) {
        if (data[k].id === client.global.get('volume_id')) {
            found = data[k].id;
            k = data.length;
        }
    }
    client.assert(found !== false, 'Volume not found in returned data.');
});
%}

### 6. Attempt to remove volume from Primary Instance (MyUKFast Implementation)
POST https://{{host}}/{{version}}/volumes/{{volume_id}}/detach
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "instance_id": "{{primary_instance_id}}"
}

> {%
client.test('Attempt to detach shared volume (MyUKFast Version)', function () {
    client.assert(response.status === 422, '422 response not received');
});
%}

### 7. Attempt to remove volume from Primary Instance
POST https://{{host}}/{{version}}/instances/{{primary_instance_id}}/volume-detach
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "volume_id": "{{volume_id}}"
}

> {%
client.test('Attempt to detach shared volume', function () {
    client.assert(response.status === 422, '422 response not received');
});
%}

### 8. Attempt to attach the volume directly to Secondary Instance (MyUKFast Version)
POST https://{{host}}/{{version}}/volumes/{{volume_id}}/attach
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "instance_id": "{{primary_instance_id}}"
}

> {%
client.test('Attempt to detach shared volume', function () {
    client.assert(response.status === 422, '422 response not received');
});
%}

### 9. Attempt to attach the volume directly to Secondary Instance
POST https://{{host}}/{{version}}/instances/{{secondary_instance_id}}/volume-attach
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "volume_id": "{{volume_id}}"
}

> {%
client.test('Attempt to detach shared volume', function () {
    client.assert(response.status === 422, '422 response not received');
});
%}

### 10. Attach the volume group to Secondary Instance
PATCH https://{{host}}/{{version}}/instances/{{secondary_instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "volume_group_id": "{{volume_group_id}}"
}

> {%
client.test('Attach volume group to secondary instance', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

### 11. Detach the volume group from Secondary Instance
PATCH https://{{host}}/{{version}}/instances/{{secondary_instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "volume_group_id": null
}

> {%
client.test('Detach volume group from secondary instance', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

### 12. Verify volume is detached from secondary instance
GET https://{{host}}/{{version}}/instances/{{secondary_instance_id}}/volumes
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Get volumes for Secondary Instance', function () {
    client.assert(response.status === 200, '200 response not received');
    var data = response.body.data;
    var found = false;
    for (k=0; k < data.length; k++) {
        if (data[k].id === client.global.get('volume_id')) {
            found = data[k].id;
            k = data.length;
        }
    }
    client.assert(found === false, 'Volume was still found in returned data.');
});
%}

### 13. Detach the volume group from Primary Instance
PATCH https://{{host}}/{{version}}/instances/{{primary_instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "volume_group_id": null
}

> {%
client.test('Detach volume group from primary instance', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

### 13a. Remove Volume From Volume Group
PATCH https://{{host}}/{{version}}/volumes/{{volume_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "volume_group_id": null
}

> {%
client.test("Remove Volume From Volume Group", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 14. Delete Volume Group
DELETE https://{{host}}/{{version}}/volume-groups/{{volume_group_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Delete Volume Group", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}

### 15. Delete Volume
DELETE https://{{host}}/{{version}}/volumes/{{volume_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Delete Volume", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}

### 16. Delete Secondary Instance
DELETE https://{{host}}/{{version}}/instances/{{secondary_instance_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Delete Secondary Instance", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}

### 17. Delete Primary Instance
DELETE https://{{host}}/{{version}}/instances/{{primary_instance_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Delete Primary Instance", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}
