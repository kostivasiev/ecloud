### Create an Instance
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  7052-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 2,
  "ram_capacity": 2048,
  "image_id": "{{dev_image_id}}",
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 30
}

> {%
client.global.set('instance_id', response.body.data.id);
client.log('Instance ID: ' + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Check the Instance
GET https://{{host}}/{{version}}/instances/i-1d443090-dev
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

### Get billing metrics
GET https://{{host}}/{{version}}/billing-metrics/?resource_id:eq={{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Get billing metrics ids', function () {
    client.assert(response.status === 200, "Response status is not 200");
    var data = response.body.data;
    client.global.set('metric_count', data.length);
    for (k=0; k < data.length; k++) {
        if (data[k].key === 'vcpu.count') {
            client.global.set('vcpu_metric_id', data[k].id);
            client.assert(data[k].end === null, 'End date should be null');
        }
        if (data[k].key === 'ram.capacity') {
            client.global.set('ram_capacity_metric_id', data[k].id);
            client.assert(data[k].end === null, 'End date should be null');
        }
    }
});
%}

### Turn the instance off
PUT https://{{host}}/{{version}}/instances/{{instance_id}}/power-off
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Instance was not powered off");
});
%}

### Check vcpu billing metric is ended
GET https://{{host}}/{{version}}/billing-metrics/{{vcpu_metric_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Check vcpu metric is ended', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.end !== null, 'End should not be null');
});
%}

### Check ram capacity billing metric is ended
GET https://{{host}}/{{version}}/billing-metrics/{{ram_capacity_metric_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Check ram capacity metric is ended', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.end !== null, 'End should not be null');
});
%}

### Check there are no additional metrics
GET https://{{host}}/{{version}}/billing-metrics/?resource_id:eq={{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Check number of billing metrics', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.length === client.global.get('metric_count'), 'There are additional metrics present');
});
%}

### Power the instance back on to resume billing
PUT https://{{host}}/{{version}}/instances/{{instance_id}}/power-on
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Instance was not powered off");
});
%}

### Check there are new metrics
GET https://{{host}}/{{version}}/billing-metrics/?resource_id:eq={{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Check number of billing metrics', function () {
    client.assert(response.status === 200, "Response status is not 200");
    var data = response.body.data;
    client.assert(data.length > client.global.get('metric_count'), 'There are no new metrics present.');
    for (k=0; k < data.length; k++) {
        if (data[k].key === 'vcpu.count') {
            client.assert(data[k].id !== client.global.get('vcpu_metric_id'), 'No new vcpu metric found');
            client.assert(data[k].end === null, 'End date should be null');
        }
        if (data[k].key === 'ram.capacity') {
            client.assert(data[k].id !== client.global.get('ram_capacity_metric_id'), 'No new ram capacity metric found');
            client.assert(data[k].end === null, 'End date should be null');
        }
    }
    client.global.set('metric_count', data.length);
});
%}

### Reboot the instance
PUT https://{{host}}/{{version}}/instances/{{instance_id}}/power-restart
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Instance was not powered off");
});
%}

### Check that metrics have not changed
GET https://{{host}}/{{version}}/billing-metrics/?resource_id:eq={{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Check number of billing metrics', function () {
    client.assert(response.status === 200, "Response status is not 200");
    var data = response.body.data;
    client.assert(data.length === client.global.get('metric_count'), 'There are new metrics present.');
});
%}

###
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json