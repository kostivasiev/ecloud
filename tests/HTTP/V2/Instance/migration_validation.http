### 1. Create an Instance
POST https://{{host}}/{{version}}/instances
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "vpc_id": "{{dev_vpc_id}}",
    "name": "Test",
    "vcpu_cores": 1,
    "ram_capacity": 1024,
    "image_id": "{{dev_image_id}}",
    "requires_floating_ip": false,
    "network_id": "{{dev_network_id}}",
    "volume_capacity": 30,
    "volume_iops": 600
}

> {%
client.global.set("instance_id", response.body.data.id);
client.log("Instance ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### 2. Create an Affinity Rule
POST https://{{host}}/{{version}}/affinity-rules
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Test Rule",
    "type": "anti-affinity",
    "availability_zone_id": "{{dev_availability_zone_id}}",
    "vpc_id": "{{dev_vpc_id}}"
}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 202, '202 response not received');
});
client.global.set('affinity_rule_id', response.body.data.id);
%}

### 3. Create Affinity Rule Member
POST https://{{host}}/{{version}}/affinity-rules/{{affinity_rule_id}}/members
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "instance_id": "{{instance_id}}"
}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 202, '202 response not received');
});
client.global.set('affinity_rule_member_id', response.body.data.id);
%}

### 4. Move the instance to a PRIVATE host group
POST https://{{host}}/{{version}}/instances/{{instance_id}}/migrate
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "host_group_id": "hg-aaaaaaaa"
}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 403, '403 response not received');
});
%}

### 5. Remove instance from Affinity Rule
DELETE https://{{host}}/{{version}}/affinity-rules/{{affinity_rule_id}}/members/{{affinity_rule_member_id}}
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 204, '204 response not received');
});
%}

### 6. Move the instance to a PRIVATE host group
POST https://{{host}}/{{version}}/instances/{{instance_id}}/migrate
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "host_group_id": "hg-aaaaaaaa"
}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 403, '403 response not received');
});
%}

### 7. Move the instance to a PUBLIC host group
POST https://{{host}}/{{version}}/instances/{{instance_id}}/migrate
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

### 8. Cleanup Affinity Rule
DELETE https://{{host}}/{{version}}/affinity-rules/{{affinity_rule_id}}
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

### 9. Cleanup instance
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json