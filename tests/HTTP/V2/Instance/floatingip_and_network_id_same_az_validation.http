# Create a secondary availability zone
POST https://{{host}}/{{version}}/availability-zones
X-consumer-custom-id:  {{dev_reseller_id_admin}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "name": "Test AZ",
  "code": "TESTYTESTTEST",
  "datacentre_site_id": 8,
  "is_public": true,
  "region_id": "{{dev_region_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 200");
});

client.global.set('availability_zone_id', response.body.data.id);
client.log('Availability Zone ID: ' + response.body.data.id);
%}

### Create a fip in the secondary az
POST https://{{host}}/{{version}}/floating-ips
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id": "{{availability_zone_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('fip_id', response.body.data.id);
client.log('Floating IP ID: ' + response.body.data.id);
%}

### Try to launch an instance using the dev network_id (on the dev az), and a fip on our secondary az - should fail.
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 1,
  "ram_capacity": 1024,
  "image_id": "{{dev_image_id}}",
  "requires_floating_ip": true,
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 30,
  "floating_ip_id": "{{fip_id}}"
}

> {%
client.global.set('instance_id', response.body.data.id);
client.log('Instance ID: ' + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 422, "Response status is not 422");
});
%}

### Delete the fip on the secondary az
DELETE https://{{host}}/{{version}}/floating-ips/{{fip_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Create a fip on the dev az
POST https://{{host}}/{{version}}/floating-ips
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id": "{{dev_availability_zone_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('fip_id', response.body.data.id);
client.log('Floating IP ID: ' + response.body.data.id);
%}

### Try to launch an instance with the dev network id on the dav az, and fip also on the dev az - should succeed.
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 1,
  "ram_capacity": 1024,
  "image_id": "{{dev_image_id}}",
  "requires_floating_ip": true,
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 30,
  "floating_ip_id": "{{fip_id}}"
}

> {%
client.global.set('instance_id', response.body.data.id);
client.log('Instance ID: ' + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Clean up once the instance has finished deploying
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

### Delete the secondary AZ
DELETE https://{{host}}/{{version}}/availability-zones/{{availability_zone_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write