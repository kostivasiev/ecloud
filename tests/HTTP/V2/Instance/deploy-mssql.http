### Deploy MSSQL instance
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "MSSQL Test",
  "vcpu_cores": 1,
  "ram_capacity": 1024,
  "image_id": "img-mssql-std",
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 40,
  "requires_floating_ip": false
}

> {%
client.global.set('instance_id', response.body.data.id);
client.log('Instance ID: ' + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Check the instance deployed successfully
GET https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### Hit the licenses APIO to confirm licence assigned (correct VPN settings will be requried)
GET https://kong.staging.rnd.ukfast/licenses/v1/licenses?owner_type:eq=ecloud&license_type:eq=mssql&owner_id:eq={{instance_id}}
Accept: */*
Cache-Control: no-cache
Authorization: myukfast
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.meta.pagination.count === 1, "license was not assigned");
});
%}

### Get MSSQL billing metrics for instance
GET https://{{host}}/{{version}}/billing-metrics/?key:eq=license.mssql.standard&resource_id:eq={{instance_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.length > 0, 'No items were returned');
    client.assert(response.body.data[0].key === 'license.mssql.standard', 'Mssql Billing not found');
    client.assert(response.body.data[0].end === null, 'End date is not null');
    client.assert(response.body.data[0].value === 2, 'Incorrect number of packs against metric');
    client.global.set('first_mssql_billing_id', response.body.data[0].id);
    client.log('First MSSQL Billing ID: ' + response.body.data[0].id);
});
%}

### Get Windows billing metrics for instance
GET https://{{host}}/{{version}}/billing-metrics/?key:eq=license.windows&resource_id:eq={{instance_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.length > 0, 'No items were returned');
    client.assert(response.body.data[0].key === 'license.windows', 'Windows Billing not found');
    client.assert(response.body.data[0].end === null, 'End date is not null');
    client.global.set('first_windows_billing_id', response.body.data[0].id);
    client.log('First Windows Billing ID: ' + response.body.data[0].id);
});
%}

### Update the number of cores of the instance
PATCH https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vcpu_cores": 5
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Verify MSSQL billing metrics for instance have ended
GET https://{{host}}/{{version}}/billing-metrics/{{first_mssql_billing_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.key === 'license.mssql.standard', 'Mssql Billing not found');
    client.assert(response.body.data.end !== null, 'End date is null');
});
%}

### Verify Windows billing metrics for instance have ended
GET https://{{host}}/{{version}}/billing-metrics/{{first_windows_billing_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.key === 'license.windows', 'Windows Billing not found');
    client.assert(response.body.data.end !== null, 'End date is null');
});
%}

### Get New MSSQL billing metrics for instance
GET https://{{host}}/{{version}}/billing-metrics/?key:eq=license.mssql.standard&end:eq=null&resource_id:eq={{instance_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.length > 0, 'No items were returned');
    client.assert(response.body.data[0].key === 'license.mssql.standard', 'Mssql Billing not found');
    client.assert(response.body.data[0].end === null, 'End date is not null');
    client.assert(response.body.data[0].value === 3, 'Incorrect number of packs against metric');
    client.global.set('second_mssql_billing_id', response.body.data[0].id);
    client.log('Second MSSQL Billing ID: ' + response.body.data[0].id);
});
%}

### Get New Windows billing metrics for instance
GET https://{{host}}/{{version}}/billing-metrics/?key:eq=license.windows&end:eq=null&resource_id:eq={{instance_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.length > 0, 'No items were returned');
    client.assert(response.body.data[0].key === 'license.windows', 'Windows Billing not found');
    client.assert(response.body.data[0].end === null, 'End date is not null');
    client.global.set('second_windows_billing_id', response.body.data[0].id);
    client.log('Second Windows Billing ID: ' + response.body.data[0].id);
});
%}

### Delete the instance
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Verify MSSQL billing metrics for instance have ended
GET https://{{host}}/{{version}}/billing-metrics/{{second_mssql_billing_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.key === 'license.mssql.standard', 'Mssql Billing not found');
    client.assert(response.body.data.end !== null, 'End date is null');
});
%}

### Verify Windows billing metrics for instance have ended
GET https://{{host}}/{{version}}/billing-metrics/{{second_windows_billing_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.key === 'license.windows', 'Windows Billing not found');
    client.assert(response.body.data.end !== null, 'End date is null');
});
%}
