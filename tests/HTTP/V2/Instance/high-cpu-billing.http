### 1. Get resource tiers
GET https://{{host}}/{{version}}/resource-tiers/rt-high-cpu
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.global.set('high_cpu_resource_tier_id', response.body.data.id);
%}

### 2. Test deploy an instance with no resource tier or host group specified.
# should deploy to defaut resource tier (standard CPU)

POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 1,
  "ram_capacity": 1024,
  "image_id": "{{dev_image_id}}",
  "requires_floating_ip": false,
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 30
}

> {%
client.global.set('instance_id', response.body.data.id);
client.log('Instance ID: ' + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### 3. Test deploy an instance with high cpu resource tier
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 1,
  "ram_capacity": 1024,
  "image_id": "{{dev_image_id}}",
  "requires_floating_ip": false,
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 30,
  "resource_tier_id": "{{high_cpu_resource_tier_id}}"
}

> {%
client.global.set('high_cpu_instance_id', response.body.data.id);
client.log('Instance ID: ' + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### 4. Get standard instance billing metrics
GET https://{{host}}/{{version}}/billing-metrics?resource_id:eq={{instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

### 5. Get high cpu billing metrics
GET https://{{host}}/{{version}}/billing-metrics?resource_id:eq={{high_cpu_instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

### 6. Update vcpus used by instance
PATCH https://{{host}}/{{version}}/instances/{{high_cpu_instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "vcpu_cores": 2
}

### 7. Get high cpu billing metrics
GET https://{{host}}/{{version}}/billing-metrics?resource_id:eq={{high_cpu_instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Check billing metric is for correct number of cpus', function () {
    let numCpu = response.body.data[0].value;
    client.assert(numCpu === 2, 'Wrong number of CPUs in billing metric');
});
%}

### 8. Delete standard instance
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

### 9. Delete high cpu instance
DELETE https://{{host}}/{{version}}/instances/{{high_cpu_instance_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json