# Test config default min volume capacity for linux appliance of 20GB
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 1,
  "ram_capacity": 2048,
  "image_id": "6e12d729",
  "requires_floating_ip": true,
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 10
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 422, "default linux volume capacity validation failed");
});

client.global.set('instance_id', response.body.data.id);
client.log('Instance ID: ' + response.body.data.id);

%}

###

###
# Populate Default Ram Parameter (Centos 7 latest version)
POST https://{{host}}/v1/appliance-versions/4e8b8108-25bf-4b16-877b-97b8166a212c/data
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "key": "ukfast.spec.ram.min",
    "value": 2048,
    "appliance_version_uuid": "c879f613-cdf7-4f28-a8d6-fd3a558c575c"
}

> {%
client.test('Assign the minimum RAM metadata', function () {
    client.assert(response.status === 201, 'Metadata record was not created');
    client.global.set('min_ram', response.body.data.value);
});
%}

###
# Populate Default min volume Parameter (Centos 7 latest version)
POST https://{{host}}/v1/appliance-versions/4e8b8108-25bf-4b16-877b-97b8166a212c/data
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "key": "ukfast.spec.volume.min",
    "value": 50,
    "appliance_version_uuid": "c879f613-cdf7-4f28-a8d6-fd3a558c575c"
}

> {%
client.test('Assign the minimum Volume capacity', function () {
    client.assert(response.status === 201, 'minimum Volume capacity was not created');
    client.global.set('min_ram', response.body.data.value);
});
%}
###
# Populate Default min volume Parameter (Centos 7 latest version)
POST https://{{host}}/v1/appliance-versions/4e8b8108-25bf-4b16-877b-97b8166a212c/data
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "key": "ukfast.spec.ram.max",
    "value": 3072,
    "appliance_version_uuid": "c879f613-cdf7-4f28-a8d6-fd3a558c575c"
}

> {%
client.test('Assign the minimum Volume capacity', function () {
    client.assert(response.status === 201, 'minimum Volume capacity was not created');
    client.global.set('min_ram', response.body.data.value);
});
%}
###



POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 1,
  "ram_capacity": 1024,
  "appliance_id": "6e12d729-ca82-49f9-89d2-eec2360c482a",
  "requires_floating_ip": true,
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 1
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 422, "RAM capacity error was not thrown");
});
%}

###

POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 1,
  "ram_capacity": 2048,
  "appliance_id": "6e12d729-ca82-49f9-89d2-eec2360c482a",
  "requires_floating_ip": true,
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 30
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 422, "Volume capacity error was not thrown");
});
%}

###


POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "vpc_id": "{{dev_vpc_id}}",
  "name": "Test",
  "vcpu_cores": 1,
  "ram_capacity": 2048,
  "appliance_id": "6e12d729-ca82-49f9-89d2-eec2360c482a",
  "requires_floating_ip": true,
  "network_id": "{{dev_network_id}}",
  "volume_capacity": 10
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Instance was not created");
});

client.global.set('instance_id', response.body.data.id);
client.log('Instance ID: ' + response.body.data.id);

%}

###

## Run php artisan queue:work & wait for the instance to finish deploying


PATCH https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "ram_capacity": 4096
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 422, "Ram capacity error was not thrown");
});

%}

###


DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json
###