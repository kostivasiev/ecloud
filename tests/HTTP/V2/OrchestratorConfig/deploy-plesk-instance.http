### Build Orchestrator Config
POST https://{{host}}/{{version}}/orchestrator-configs
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "reseller_id": 7052,
    "employee_id": 1
}

> {%

client.global.set("orchestrator_config_id", response.body.data.id);
client.log("Builder Configuration ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201");
});
%}

### Set Orchestrator Data
POST https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}/data
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "instances": [
        {
            "name": "Plesk Test Instance",
            "vpc_id": "vpc-aaaaaaaa",
            "image_id": "img-plesk",
            "vcpu_cores": 1,
            "ram_capacity": 1024,
            "locked": false,
            "backup_enabled": false,
            "network_id": "net-aaaaaaaa",
            "requires_floating_ip": false,
            "volume_capacity": 30,
            "volume_iops": 300,
            "ssh_key_pair_ids": [
                "ssh-aaaaaaaa"
            ]
        }
    ]
}
> {%

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### Deploy Instance
POST https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}/deploy
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.global.set("orchestrator_build_id", response.body.data.id);
client.log("orchestrator_build_id: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Get the instance_id from the build
GET https://{{host}}/{{version}}/orchestrator-builds/{{orchestrator_build_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.global.set("instance_id", response.body.data.state.instance[0]);
client.log("instance_id: " + response.body.data.state.instance[0]);

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### Get the Credential entry
GET https://{{host}}/{{version}}/credentials?resource_id:eq={{instance_id}}&name:eq=Plesk%20Administrator
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.data.length > 0, 'No items were returned');
});
%}

### Cleanup
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 202, "Response status is not 202");
});
%}

### Clean Orchestrator Data
DELETE https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 204, "Response status is not 204");
});
%}