### 1. Build Orchestrator Config
POST https://{{host}}/{{version}}/orchestrator-configs
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "reseller_id": 7052,
    "employee_id": 1
}

> {%

client.global.set("orchestrator_config_id", response.body.data.id);
client.log("Builder Configuration ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201");
});
%}

### 2. Set Orchestrator Data
POST https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}/data
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "volumes": [
        {
            "name": "Orchestrator Volume 1",
            "vpc_id": "vpc-aaaaaaaa",
            "availability_zone_id": "az-aaaaaaaa",
            "capacity": 10,
            "iops": 300
        },
        {
            "name": "Orchestrator Volume 2",
            "vpc_id": "vpc-aaaaaaaa",
            "availability_zone_id": "az-aaaaaaaa",
            "capacity": 10,
            "iops": 300
        }
    ]
}
> {%

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 3. Deploy Volumes
POST https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}/deploy
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.global.set("orchestrator_build_id", response.body.data.id);
client.log("orchestrator_build_id: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### 4. Get the Volume IDs from the build
GET https://{{host}}/{{version}}/orchestrator-builds/{{orchestrator_build_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.global.set("volume_id_1", response.body.data.state.volume[0]);
client.log("volume_id_1: " + response.body.data.state.volume[0]);
client.global.set("volume_id_2", response.body.data.state.volume[1]);
client.log("volume_id_2: " + response.body.data.state.volume[1]);

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 5. Get the first volume
GET https://{{host}}/{{version}}/volumes/{{volume_id_1}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 6. Get the second volume
GET https://{{host}}/{{version}}/volumes/{{volume_id_2}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 7. Cleanup first volume
DELETE https://{{host}}/{{version}}/volumes/{{volume_id_1}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 202, "Response status is not 202");
});
%}

### 8. Cleanup second volume
DELETE https://{{host}}/{{version}}/volumes/{{volume_id_2}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 202, "Response status is not 202");
});
%}

### 9. Clean Orchestrator Data
DELETE https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 204, "Response status is not 204");
});
%}