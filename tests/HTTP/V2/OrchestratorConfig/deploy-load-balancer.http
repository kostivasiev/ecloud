### Build Orchestrator Config
POST https://{{host}}/{{version}}/orchestrator-configs
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "reseller_id": 7052,
    "employee_id": 1
}

> {%

client.global.set("orchestrator_config_id", response.body.data.id);
client.log("Builder Configuration ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201");
});
%}

### Set Orchestrator Data
POST https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}/data
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "load-balancers": [
        {
            "name": "My Load Balancer",
            "availability_zone_id": "{{dev_availability_zone_id}}",
            "vpc_id": "{{dev_vpc_id}}",
            "load_balancer_spec_id": "{{dev_load_balancer_spec_id}}"
        }
    ]
}
> {%

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### Deploy
POST https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}/deploy
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.global.set("orchestrator_build_id", response.body.data.id);
client.log("orchestrator_build_id: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Get the load_balancer_id from the build
GET https://{{host}}/{{version}}/orchestrator-builds/{{orchestrator_build_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.global.set("load_balancer_id", response.body.data.state.load_balancer[0]);
client.log("load_balancer_id: " + response.body.data.state.load_balancer[0]);

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### Cleanup
DELETE https://{{host}}/{{version}}/load-balancers/{{load_balancer_id}}
X-consumer-custom-id:  {{dev_reseller_id_admin}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 202, "Response status is not 202");
});
%}

### Clean Orchestrator Data
DELETE https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 204, "Response status is not 204");
});
%}