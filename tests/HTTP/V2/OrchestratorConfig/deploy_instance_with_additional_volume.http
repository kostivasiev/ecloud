### 1. Build Orchestrator Config
POST https://{{host}}/{{version}}/orchestrator-configs
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "reseller_id": 7052,
    "employee_id": 1
}

> {%

client.global.set("orchestrator_config_id", response.body.data.id);
client.log("Builder Configuration ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 201");
});
%}

### 2. Set Orchestrator Data
POST https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}/data
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "instances": [
        {
            "quantity": 2,
            "name": "Centos Test Instance",
            "vpc_id": "vpc-aaaaaaaa",
            "image_id": "img-centos-mcafee",
            "vcpu_cores": 1,
            "ram_capacity": 1024,
            "locked": false,
            "backup_enabled": false,
            "network_id": "net-aaaaaaaa",
            "requires_floating_ip": false,
            "volume_capacity": 30,
            "volume_iops": 300,
            "ssh_key_pair_ids": [
                "ssh-aaaaaaaa"
            ]
        }
    ],
    "volumes": [
        {
            "name": "Orchestrator Volume 1",
            "vpc_id": "vpc-aaaaaaaa",
            "availability_zone_id": "az-aaaaaaaa",
            "capacity": 10,
            "iops": 300
        },
        {
            "name": "Orchestrator Volume 2",
            "vpc_id": "vpc-aaaaaaaa",
            "availability_zone_id": "az-aaaaaaaa",
            "capacity": 10,
            "iops": 300
        }
    ],
    "instance_volumes": [
        {
            "instance_id": "{instance.0.0}",
            "volume_id": "{volume.0}"
        },
        {
            "instance_id": "{instance.0.1}",
            "volume_id": "{volume.1}"
        }
    ]
}
> {%

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 3. Deploy Instances and Volumes and Mount them
POST https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}/deploy
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.global.set("orchestrator_build_id", response.body.data.id);
client.log("orchestrator_build_id: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### 4. Get the instance_ids and volume_ids from the build
GET https://{{host}}/{{version}}/orchestrator-builds/{{orchestrator_build_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.global.set("instance_id_1", response.body.data.state.instance[0][0]);
client.log("instance_id 1: " + response.body.data.state.instance[0][0]);
client.global.set("instance_id_2", response.body.data.state.instance[0][1]);
client.log("instance_id 2: " + response.body.data.state.instance[0][1]);
client.global.set("volume_id_1", response.body.data.state.volume[0]);
client.log("volume_id 1: " + response.body.data.state.volume[0]);
client.global.set("volume_id_2", response.body.data.state.volume[1]);
client.log("volume_id 2: " + response.body.data.state.volume[1]);

client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 5. Get the 1st Instance
GET https://{{host}}/{{version}}/instances/{{instance_id_1}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 6. Get the 2nd Instance
GET https://{{host}}/{{version}}/instances/{{instance_id_2}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 7. Get the volumes for the 1st instance
GET https://{{host}}/{{version}}/instances/{{instance_id_1}}/volumes
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 8. Get the volumes for the 2nd instance
GET https://{{host}}/{{version}}/instances/{{instance_id_2}}/volumes
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### 9. Cleanup 1st Instance
DELETE https://{{host}}/{{version}}/instances/{{instance_id_1}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 202, "Response status is not 202");
});
%}

### 10. Cleanup 2nd Instance
DELETE https://{{host}}/{{version}}/instances/{{instance_id_2}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 202, "Response status is not 202");
});
%}

### 11. Cleanup 1st Volume
DELETE https://{{host}}/{{version}}/volumes/{{volume_id_1}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 202, "Response status is not 202");
});
%}

### 12. Cleanup 2nd Volume
DELETE https://{{host}}/{{version}}/volumes/{{volume_id_2}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 202, "Response status is not 202");
});
%}

### 13. Clean Orchestrator Data
DELETE https://{{host}}/{{version}}/orchestrator-configs/{{orchestrator_config_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Request executed successfully', function () {
    client.assert(response.status === 204, "Response status is not 204");
});
%}