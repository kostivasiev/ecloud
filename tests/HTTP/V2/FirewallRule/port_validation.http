### Create firewall Policy
POST https://{{host}}/{{version}}/firewall-policies
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "name": "Accept Spaces Policy",
  "sequence": 10,
  "router_id": "{{dev_router_id}}"
}

> {%
client.global.set('firewall_policy_id', response.body.data.id);
client.log('Firewall Policy ID: ' + response.body.data.id);
%}

####
#GET https://{{host}}/{{version}}/firewall-policies
#X-consumer-custom-id: {{dev_reseller_id_customer}}
#X-consumer-groups:  ecloud.read, ecloud.write
#Content-Type:  application/json

### Create Firewall Rule
POST https://{{host}}/{{version}}/firewall-rules
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "sequence": 10,
    "firewall_policy_id": "{{firewall_policy_id}}",
    "source": "212.22.18.10/24, 212.22.18.10/24",
    "destination": "212.22.18.10/24, 212.22.18.10/24",
    "action": "ALLOW",
    "direction": "IN",
    "enabled": true,
    "ports": [
        {
            "protocol": "TCP",
            "source": "1, 2, 3 ,4-5",
            "destination": "1, 2, 3 ,4-5"
        }
    ]
}

> {%
client.global.set('rule_id', response.body.data.id);
client.log('Rule ID: ' + response.body.data.id);
%}

### Get Rule and confirm source/destination has stripped white space
GET https://{{host}}/{{version}}/firewall-rules/{{rule_id}}
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.source === "212.22.18.10\/24,212.22.18.10\/24");
  client.assert(response.body.data.destination === "212.22.18.10\/24,212.22.18.10\/24");
});
%}

### Get Rule Ports
GET https://{{host}}/{{version}}/firewall-rules/{{rule_id}}/ports
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data[0].source === "1,2,3,4-5");
  client.assert(response.body.data[0].destination === "1,2,3,4-5");
});
%}



### Clean up

# Delete rule
DELETE https://{{host}}/{{version}}/firewall-rules/{{rule_id}}
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Delete the policy
DELETE https://{{host}}/{{version}}/firewall-policies/fwp-f1326c14-dev
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json