# Create Firewall Rule
POST https://{{host}}/{{version}}/firewall-rules
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "Rule Test - test delete",
    "sequence": 10,
    "firewall_policy_id": "{{dev_firewall_policy_id}}",
    "source": "100.64.0.0",
    "destination": "100.64.0.0-100.64.0.32",
    "action": "ALLOW",
    "direction": "IN",
    "enabled": true,
    "ports": [
        {
           "protocol": "UDP",
           "source": "1-30000",
           "destination": "55"
        },
        {
           "protocol": "TCP",
           "source": "443",
           "destination": "555"
        }
    ]
}

> {%
client.global.set('rule_id', response.body.data.id);
client.log('Rule ID: ' + response.body.data.id);
%}

###
# Get Rules Collection
GET https://{{host}}/{{version}}/firewall-rules
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###
# Get Rule Item
GET https://{{host}}/{{version}}/firewall-rules/{{rule_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.sequence === 10);
});
%}

###

# Get Rule Ports
GET https://{{host}}/{{version}}/firewall-rules/{{rule_id}}/ports
X-consumer-custom-id:  1-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###

PATCH https://{{host}}/{{version}}/firewall-rules/{{rule_id}}
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Updated Rule Name"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###
# Delete Policy
DELETE https://{{host}}/{{version}}/firewall-rules/fwr-28016d9d
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}