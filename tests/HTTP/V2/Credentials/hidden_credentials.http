###
# Create Credential
POST https://{{host}}/{{version}}/credentials
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "resource_id": "i-aaaaaaaa",
    "host": "https://127.0.0.1",
    "username": "someuser",
    "password": "somepassword",
    "port": "8080",
    "is_hidden": true
}

> {%
client.test('Test Credential Creation', function () {
    client.assert(response.status === 201, "201 response not received");
    client.global.set('credential_id', response.body.data.id);
    client.log('Credentials ID: ' + response.body.data.id);
});
%}

###
# Get Credential as Admin
GET https://{{host}}/{{version}}/credentials/{{credential_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write

> {%
client.test('Get credential as admin user', function () {
    client.assert(response.status === 200, '200 response not received');
    client.assert(response.body.data.hasOwnProperty('is_hidden'), 'Response does not contain is_hidden');
    client.assert(response.body.data.is_hidden === true, 'is_hidden property is not true');
});
%}

###
# Get credential as user
GET https://{{host}}/{{version}}/instances/i-aaaaaaaa/credentials
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write

> {%
client.test('Get credential as admin user', function () {
    client.assert(response.status === 200, '200 response not received');
    client.assert(!response.body.data.hasOwnProperty('is_hidden'), 'Response contains is_hidden');
});
%}

###
# Delete Credential as Admin
DELETE https://{{host}}/{{version}}/credentials/{{credential_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
