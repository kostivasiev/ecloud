### Create Router
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test router",
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}"
}

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 202, "Response status is not 201");
    client.global.set('router_id', response.body.data.id);
    client.log('Router ID: ' + response.body.data.id);
});
%}

### Create VPN Service
POST https://{{host}}/{{version}}/vpn-services
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "VPN HTTP Request Test",
    "router_id": "{{router_id}}"
}

> {%
client.test('VPN Created', function () {
    client.assert(response.status === 202, '202 Response not received');
});
client.global.set('vpn_id', response.body.data.id);
client.log('VPN ID: ' + response.body.data.id);
%}

### Create VPN Endpoint
POST https://{{host}}/{{version}}/vpn-endpoints
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "Endpoint Test",
    "vpn_service_id": "{{vpn_id}}",
    "vpc_id": "{{dev_vpc_id}}"
}

> {%
client.test('Create VPN Endpoint', function () {
    client.assert(response.status === 202, '202 response not received');
});
client.global.set('vpn_endpoint_id', response.body.data.id);
client.log('VPN Endpoint ID: ' + response.body.data.id);
%}

### Get the Floating IP
GET https://{{host}}/{{version}}/floating-ips?resource_id:eq={{vpn_endpoint_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Get the floating ip', function () {
    client.assert(response.status === 200, '200 response not received');
});
client.global.set('fip_id', response.body.data[0].id);
client.log('Floating IP ID: ' + response.body.data[0].id);
%}


### Verify the endpoint exists in NSX
GET https://185.197.63.88/policy/api/v1/infra/tier-1s/{{router_id}}/locale-services/{{router_id}}/ipsec-vpn-services/{{vpn_id}}/local-endpoints/{{vpn_endpoint_id}}
Authorization: Basic {{nsx_username}} {{nsx_password}}
Content-Type:  application/json

> {%
client.test('Verify Endpoint in NSX', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

### Delete the Endpoint
DELETE https://{{host}}/{{version}}/vpn-endpoints/{{vpn_endpoint_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Delete VPN Endpoint', function () {
    client.assert(response.status === 202, '202 response not received');
});
client.log('UPDATE floating_ips SET floating_ips.resource_type=NULL, floating_ips.resource_id=NULL WHERE floating_ips.id=\'' + client.global.get('fip_id') + '\';')
%}

### Before going any further execute the following sql in the database:-
### UPDATE floating_ips SET floating_ips.resource_type=NULL, floating_ips.resource_id=NULL WHERE floating_ips.id='{{floating_ip_id}}';

### Delete the Floating IP
POST https://{{host}}/{{version}}/floating-ips/{{fip_id}}/unassign
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
DELETE https://{{host}}/{{version}}/floating-ips/{{fip_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Delete FIP', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}

### Delete the Endpoint in NSX
DELETE https://185.197.63.88/policy/api/v1/infra/tier-1s/{{router_id}}/locale-services/{{router_id}}/ipsec-vpn-services/{{vpn_id}}/local-endpoints/{{vpn_endpoint_id}}
Authorization: Basic {{nsx_username}} {{nsx_password}}
Content-Type:  application/json

### Create VPN Service
DELETE https://{{host}}/{{version}}/vpn-services/{{vpn_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

###
DELETE https://{{host}}/{{version}}/routers/{{router_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json