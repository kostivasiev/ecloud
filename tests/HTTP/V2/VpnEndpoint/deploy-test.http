### Create Endpoint
POST https://{{host}}/{{version}}/vpn-endpoints
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "Endpoint Test",
    "vpn_service_id": "vpn-aaaaaaaa",
    "vpc_id": "{{dev_vpc_id}}"
}

> {%
client.test('Create VPN Endpoint', function () {
    client.assert(response.status === 202, '202 response not received');
});
client.global.set('vpn_endpoint_id', response.body.data.id);
client.log('VPN Endpoint ID: ' + response.body.data.id);
%}

### Get the Floating IP
GET https://{{host}}/{{version}}/floating-ips?resource_id:eq={{vpn_endpoint_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Get the floating ip', function () {
    client.assert(response.status === 200, '200 response not received');
});
client.global.set('fip_id', response.body.data[0].id);
client.log('Floating IP ID: ' + response.body.data[0].id);
%}

### Verify the endpoint exists in NSX
GET https://185.197.63.88/api/v1/vpn/ipsec/local-endpoints
Authorization: Basic {{nsx_username}} {{nsx_password}}
Content-Type:  application/json

> {%
client.test('Verify Endpoint in NSX', function () {
    client.assert(response.status === 200, '200 response not received');
});
var results = response.body.results;
var foundResult = '';
for (var k=0; k < results.length; k++) {
    if (results[k].display_name === client.global.get('vpn_endpoint_id')) {
        foundResult = results[k].display_name;
        client.global.set('vpn_endpoint_uuid', results[k].id);
        k = results.length;
    }
}
client.assert(client.global.get('vpn_endpoint_id') === foundResult, 'VPN Endpoint not found');
%}

### Delete the Endpoint
DELETE https://{{host}}/{{version}}/vpn-endpoints/{{vpn_endpoint_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Delete VPN Endpoint', function () {
    client.assert(response.status === 204, '204 response not received');
});
client.log('UPDATE floating_ips SET floating_ips.resource_type=NULL, floating_ips.resource_id=NULL WHERE floating_ips.id=\'' + client.global.get('fip_id') + '\';')
%}

### Before going any further execute the following sql in the database:-
### UPDATE floating_ips SET floating_ips.resource_type=NULL, floating_ips.resource_id=NULL WHERE floating_ips.id='{{floating_ip_id}}';

### Delete the Floating IP
DELETE https://{{host}}/{{version}}/floating-ips/{{fip_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Delete FIP', function () {
    client.assert(response.status === 204, '204 response not received');
});
%}

### Delete the Endpoint in NSX
DELETE https://185.197.63.88/api/v1/vpn/ipsec/local-endpoints/{{vpn_endpoint_uuid}}
Authorization: Basic {{nsx_username}} {{nsx_password}}
Content-Type:  application/json

> {%
client.test('Delete the Endpoint in NSX' function () {
    client.assert(response.status === 204, '204 response not received');
});
%}