### Create Router (to deploy management networking)
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test router",
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}"
}

> {%
client.test("Create Router", function() {
    client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('router_id', response.body.data.id);
client.log('Router ID: ' + response.body.data.id);
%}

### Create a network
POST https://{{host}}/{{version}}/networks
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "router_id": "{{router_id}}",
  "subnet": "192.168.1.1/29"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('network_id', response.body.data.id);
client.log('Network ID: ' + response.body.data.id);
%}

### Create a loadbalancer service with a network_id
POST https://{{host}}/{{version}}/load-balancers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "Test",
  "availability_zone_id": "{{dev_availability_zone_id}}",
  "vpc_id": "{{dev_vpc_id}}",
  "load_balancer_spec_id": "{{dev_load_balancer_spec_id}}",
  "network_ids": [
      "{{network_id}}"
  ]
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('load_balancer_id', response.body.data.id);
client.log('Load Balancer ID: ' + response.body.data.id);
%}

### Check loadbalancer status is completed (MAY TAKE A FEW MINS)
GET https://{{host}}/{{version}}/load-balancers/{{load_balancer_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json


### Check loadbalancer network is created
GET https://{{host}}/{{version}}/load-balancers/{{load_balancer_id}}/networks
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.length === 1, "Network not returned for load balancer");
});

%}

### Grab the ID of one of the nodes
GET https://{{host}}/{{version}}/load-balancers/{{load_balancer_id}}/nodes
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.global.set('node_id', response.body.data[0].id);
client.log('node_id: ' + response.body.data[0].id);
%}

### Check that a NIC was created with our network
GET https://{{host}}/{{version}}/instances/{{node_id}}/nics
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  var nic = response.body.data.filter(e => e.network_id == client.global.get("network_id"))[0];

  client.global.set('nic_id', nic.id);

  client.log(nic.id);
  client.log(nic.ip_address);

  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.filter(e => e.network_id == client.global.get("network_id")).length > 0, "No NIC found with required network");
  client.assert(nic.ip_address.length > 0, "No IP address assigned to NIC");
});
%}


###
DELETE https://{{host}}/{{version}}/load-balancers/{{load_balancer_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Clean Up!

###
DELETE https://{{host}}/{{version}}/routers/{{router_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
DELETE https://{{host}}/{{version}}/networks/{{network_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

