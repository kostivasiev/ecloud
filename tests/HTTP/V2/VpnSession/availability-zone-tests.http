POST https://{{host}}/{{version}}/availability-zones
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "name": "Test AZ",
  "code": "MAN1",
  "datacentre_site_id": 111,
  "is_public": true,
  "region_id": "{{dev_region_id}}"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 201, "Response status is not 200");
});

client.global.set('availability_zone_id', response.body.data.id);
client.log('Availability Zone ID: ' + response.body.data.id);
%}

###

### Create vpn-profile-group
POST https://{{host}}/{{version}}/vpn-profile-groups
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Profile Group CRUD Test",
    "description": "VPN Profile Group CRUD Test Record",
    "availability_zone_id": "{{availability_zone_id}}",
    "ike_profile_id": "ike-aaaaaaaa",
    "ipsec_profile_id": "ipsec-aaaaaaaa"
}

> {%
client.test('Create Resource', function () {
    client.assert(response.status === 201, '201 response not received');
});
client.global.set('vpn_profile_group_id', response.body.data.id);
client.log('VPN Profile Group ID: ' + response.body.data.id);
%}


### Create VPN Session with profile group in different az (should fail)
POST https://{{host}}/{{version}}/vpn-sessions
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "VPN Session Test",
    "vpn_profile_group_id": "{{vpn_profile_group_id}}",
    "vpn_service_id": "vpn-aaaaaaaa",
    "vpn_endpoint_id": "vpne-aaaaaaaa",
    "remote_ip": "86.6.85.195",
    "remote_networks": "192.169.0.0/16,192.177.10.0/8",
    "local_networks": "217.22.0.0/16"
}

### Create vpn-profile-group
POST https://{{host}}/{{version}}/vpn-profile-groups
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Profile Group CRUD Test",
    "description": "VPN Profile Group CRUD Test Record",
    "availability_zone_id": "{{dev_availability_zone_id}}",
    "ike_profile_id": "ike-aaaaaaaa",
    "ipsec_profile_id": "ipsec-aaaaaaaa"
}

> {%
client.test('Create Resource', function () {
    client.assert(response.status === 201, '201 response not received');
});
client.global.set('vpn_profile_group_id', response.body.data.id);
client.log('VPN Profile Group ID: ' + response.body.data.id);
%}

### Create VPN Session with profile group in same az (should pass)
POST https://{{host}}/{{version}}/vpn-sessions
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "VPN Session Test",
    "vpn_profile_group_id": "{{vpn_profile_group_id}}",
    "vpn_service_id": "vpn-aaaaaaaa",
    "vpn_endpoint_id": "vpne-aaaaaaaa",
    "remote_ip": "86.6.85.195",
    "remote_networks": "192.169.0.0/16,192.177.10.0/8",
    "local_networks": "217.22.0.0/16"
}

> {%
client.test('Create Resource', function () {
    client.assert(response.status === 202, '201 response not received');
});
client.global.set('vpn_session_id', response.body.data.id);
client.log('VPN Session ID: ' + response.body.data.id);
%}

### Delete Session
DELETE https://{{host}}/{{version}}/vpn-sessions/{{vpn_session_id}}
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
# Delete
DELETE https://{{host}}/{{version}}/availability-zones/{{availability_zone_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write