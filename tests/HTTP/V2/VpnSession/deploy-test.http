### Create Router
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test router",
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}"
}

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 202, "Response status is not 201");
    client.global.set('router_id', response.body.data.id);
    client.log('Router ID: ' + response.body.data.id);
});
%}

### Create VPN Service
POST https://{{host}}/{{version}}/vpn-services
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "VPN HTTP Request Test",
    "router_id": "{{router_id}}"
}

> {%
client.test('VPN Created', function () {
    client.assert(response.status === 202, '202 Response not received');
});
client.global.set('vpn_service', response.body.data.id);
client.log('VPN Service ID: ' + response.body.data.id);
%}

### Create VPN Endpoint
POST https://{{host}}/{{version}}/vpn-endpoints
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "Endpoint Test",
    "vpn_service_id": "{{vpn_service}}"
}

> {%
client.test('Create VPN Endpoint', function () {
    client.assert(response.status === 202, '202 response not received');
});
client.global.set('vpn_endpoint_id', response.body.data.id);
client.log('VPN Endpoint ID: ' + response.body.data.id);
%}

###
GET https://{{host}}/{{version}}/floating-ips?resource_id:eq={{vpn_endpoint_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.global.set('floating_ip_id', response.body.data[0].id);
  client.log('Fip ID: ' + response.body.data[0].id);
});
%}


### Create VPN Session
POST https://{{host}}/{{version}}/vpn-sessions
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "vpn session test",
    "vpn_profile_group_id": "vpnpg-aaaaaaaa",
    "vpn_service_id": "{{vpn_service}}",
    "vpn_endpoint_id": "{{vpn_endpoint_id}}",
    "remote_ip": "211.12.13.1",
    "remote_networks": "10.0.3.0/24",
    "local_networks": "10.0.0.0/24"
}

> {%
client.test('Create VPN Session', function () {
    client.assert(response.status === 202, '202 response not received');
});
client.global.set('vpn_session_id', response.body.data.id);
client.log('VPN Session ID: ' + response.body.data.id);
%}

### Delete VPN Session
DELETE https://{{host}}/{{version}}/vpn-sessions/{{vpn_session_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json


### Delete the Endpoint
DELETE https://{{host}}/{{version}}/vpn-endpoints/{{vpn_endpoint_id}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Resource Retrieved', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}
### Delete VPN Service
DELETE https://{{host}}/{{version}}/vpn-services/{{vpn_service}}
X-consumer-custom-id:  {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

###
DELETE https://{{host}}/{{version}}/routers/{{router_id}}
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

###
DELETE https://{{host}}/{{version}}/floating-ips/{{floating_ip_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}