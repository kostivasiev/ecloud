######### Management Router Testing

### Create VPC
POST https://{{host}}/{{version}}/vpcs
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "Management Router VPC Test",
    "region_id": "{{dev_region_id}}",
    "advanced_networking": true
}

> {%
client.global.set('vpc_id', response.body.data.id);
client.log('VPC Id : ' + response.body.data.id);
%}

### Create Router
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "Test Router for Management Deploy",
  "vpc_id": "{{vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}"
}

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 202, "Response status is not 202");
    client.global.set('router_id', response.body.data.id);
    client.global.set('task_id', response.body.data.task_id);
    client.log('Router ID: ' + response.body.data.id);
});
%}

### Get Router
GET https://{{host}}/{{version}}/routers/{{router_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### Get Management Router ID from Task
GET https://{{host}}/{{version}}/tasks/{{task_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Get task information', function () {
    client.global.set('management_router_id', response.body.data.management_router_id);
    client.log('Management Router ID: ' + response.body.data.management_router_id);
    client.global.set('management_network_id', response.body.data.management_network_id);
    client.log('Management Network ID: ' + response.body.data.management_network_id);
});
%}

### Check Management Router is not visible to non-admin in collection
GET https://{{host}}/{{version}}/routers/{{management_router_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Router hidden from user', function () {
    client.assert(response.status === 404, '404 response not received');
});
%}

### Get Management Router
GET https://{{host}}/{{version}}/routers/{{management_router_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### Check Management Network is not visible to non-admin in collection
GET https://{{host}}/{{version}}/networks/{{management_network_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Network hidden from user', function () {
    client.assert(response.status === 404, '404 response not received');
});
%}

### Get Management Network
GET https://{{host}}/{{version}}/networks/{{management_network_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 200, '200 response not received');
});
%}

### Get Firewall Policy
GET https://{{host}}/{{version}}/firewall-policies/?router_id:eq={{management_router_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Get Firewall Policy', function () {
    client.assert(response.status === 200, '200 response not received');
    client.global.set('firewall_policy_id', response.body.data[0].id);
    client.log('Firewall Policy ID: ' + response.body.data[0].id);
});
%}

### Get firewall rules
GET https://{{host}}/{{version}}/firewall-rules/?firewall_policy_id:eq={{firewall_policy_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Check firewall rules', function () {
    client.assert(response.status === 200, '200 response not received');
    client.assert(response.body.data[0].action === 'ALLOW', 'Rule is not allow');
    client.assert(response.body.data[1].action === 'REJECT', 'Rule is not reject');
    client.global.set('firewall_rule', response.body.data[0].id);
    client.log('Firewall Rule: ' + response.body.data[0].id);
});
%}

### Firewall Rule Ports
GET https://{{host}}/{{version}}/firewall-rule-ports/?firewall_rule_id:eq={{firewall_rule}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Check firewall rule port', function () {
    client.assert(response.status === 200, '200 response not received');
    client.assert(response.body.data[0].protocol === 'TCP', 'Protocol not set to TCP');
    client.assert(response.body.data[0].source === '4222', 'Source not set to 4222');
});
%}

### Get Network Policy
GET https://{{host}}/{{version}}/network-policies/?network_id:eq={{management_network_id}}
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Get Network Policy', function () {
    client.assert(response.status === 200, '200 response not received');
    client.global.set('network_policy_id', response.body.data[0].id);
    client.log('Network Policy ID: ' + response.body.data[0].id);
});
%}

### Get Network Policy Rules
GET https://{{host}}/{{version}}/network-rules/?network_policy_id:eq={{network_policy_id}}
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Check network rules', function () {
    client.assert(response.status === 200, '200 response not received');
    client.assert(response.body.data[0].action === 'ALLOW', 'Rule is not allow');
    client.assert(response.body.data[1].action === 'REJECT', 'Rule is not reject');
    client.global.set('network_rule', response.body.data[0].id);
    client.log('Network Rule: ' + response.body.data[0].id);
});
%}

### Network Rule Ports
GET https://{{host}}/{{version}}/network-rule-ports/?network_rule_id:eq={{network_rule}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Check firewall rule port', function () {
    client.assert(response.status === 200, '200 response not received');
    client.assert(response.body.data[0].protocol === 'TCP', 'Protocol not set to TCP');
    client.assert(response.body.data[0].source === '4222', 'Source not set to 4222');
});
%}

### Delete Management Network
DELETE https://{{host}}/{{version}}/networks/{{management_network_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Delete Management Router
DELETE https://{{host}}/{{version}}/routers/{{management_router_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}

### Delete Router
DELETE https://{{host}}/{{version}}/routers/{{router_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 204, "Response status is not 204");
});
%}

### Delete VPC
DELETE https://{{host}}/{{version}}/vpcs/{{vpc_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json