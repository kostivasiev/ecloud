###
# Setup Dependencies
POST https://{{host}}/{{version}}/vpcs
X-consumer-custom-id:  1-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "TEST VPC",
    "region_id": "{{dev_region_id}}"
}

> {%
client.global.set('vpc_id', response.body.data.id);
client.log('VPC Id : ' + response.body.data.id);
%}

###
# Create a Router
POST https://{{host}}/{{version}}/routers
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "name": "test router",
  "vpc_id": "{{vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}"
}

> {%
client.global.set('router_id', response.body.data.id);
client.log('Router ID: ' + response.body.data.id);
%}

###
# Create an firewall policy
POST https://{{host}}/{{version}}/firewall-policies
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "name": "Test Policy",
  "sequence": 10,
  "router_id": "{{dev_router_id}}"
}

> {%
client.global.set('firewall_policy_id', response.body.data.id);
client.log('Firewall Policy ID: ' + response.body.data.id);
%}

###
# Create a firewall rule
POST https://{{host}}/{{version}}/firewall-rules
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "Rule Test - port editing",
    "sequence": 10,
    "firewall_policy_id": "{{firewall_policy_id}}",
    "action": "ALLOW",
    "direction": "IN",
    "enabled": true,
    "ports": [
        {
           "protocol": "UDP"
        },
        {
           "protocol": "TCP",
           "source": "443",
           "destination": "555"
        }
    ]
}

> {%
client.global.set('rule_id', response.body.data.id);
client.log('Rule ID: ' + response.body.data.id);
%}

###
# Create a firewall port rule
POST https://{{host}}/{{version}}/firewall-rule-ports
X-consumer-custom-id:  1-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "firewall_rule_id": "{{rule_id}}",
    "protocol": "TCP",
    "source": "111",
    "destination": "222"
}

> {%
client.global.set('firewall_rule_port_id', response.body.data.id);
client.log('firewall_rule_port_id: ' + response.body.data.id);
%}

###
# Delete the Vpc
DELETE https://{{host}}/{{version}}/vpcs/{{vpc_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 204, "Response status is not 204 Created");
});
%}

###
# Check the Router is deleted
GET https://{{host}}/{{version}}/routers/{{router_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 404, "Response status is not 404 Created");
});
%}

###
# Check the Policy is deleted
GET https://{{host}}/{{version}}/firewall-policies/{{firewall_policy_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 404, "Response status is not 404 Created");
});
%}

###
# Check the Rule is deleted
GET https://{{host}}/{{version}}/firewall-rules/{{rule_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 404, "Response status is not 404 Created");
});
%}

###
# Check the Port Rule is deleted
GET https://{{host}}/{{version}}/firewall-rule-ports/{{firewall_rule_port_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 404, "Response status is not 404 Created");
});
%}