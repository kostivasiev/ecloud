###
# Create a VPC
POST https://{{host}}/{{version}}/vpcs
X-consumer-custom-id:  1-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
  "name": "Test VPC",
  "region_id": "{{dev_region_id}}",
  "availability_zone_id": "{{dev_availability_zone_id}}"
}

> {%
client.global.set('vpc_id', response.body.data.id);
client.log('VPC UUID: ' + response.body.data.id);
%}

###
# Add a router to the VMP so that it has active resources
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "vpc_id": "{{vpc_id}}",
  "availability_zone_id": "{{dev_availability_zone_id}}"
}

> {%
client.global.set('router_id', response.body.data.id);
client.log('Router UUID: ' + response.body.data.id);
%}

###
# Create a network
#POST https://{{host}}/{{version}}/networks
#X-consumer-custom-id:  1-0
#X-consumer-groups:  ecloud.read, ecloud.write
#Content-Type:  application/json
#
#{
#    "router_id": "{{router_id}}"
#}
#
#> {%
#client.global.set('network_id', response.body.data.id);
#client.log('Network UUID: ' + response.body.data.id);
#%}
#

###
# Delete VPC
DELETE https://{{host}}/{{version}}/vpcs/{{vpc_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

###
# Check VPC is deleted
GET https://{{host}}/{{version}}/vpcs/{{vpc_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Check that VPC is deleted', function () {
    client.assert(response.status === 404, 'VPC found when it should be deleted');
});
%}

###
# Check Router is deleted
GET https://{{host}}/{{version}}/routers/{{router_id}}
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Check that router is deleted', function () {
    client.assert(response.status === 404, 'Router found when it should be deleted');
});
%}

###
# Check Network is deleted
#GET https://{{host}}/{{version}}/networks/{{network_id}}
#X-consumer-custom-id:  0-0
#X-consumer-groups:  ecloud.read, ecloud.write
#Content-Type:  application/json
#
#> {%
#client.test('Check that network is deleted', function () {
#    client.assert(response.status === 404, 'Network found when it should be deleted');
#});
#%}