### Create VPC
POST https://{{host}}/{{version}}/vpcs
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "name": "Hostgroup VPC",
    "region_id": "{{dev_region_id}}"
}

> {%
client.global.set('vpc_id', response.body.data.id);
client.log('VPC Id : ' + response.body.data.id);
%}

### Create Hostgroup
POST https://{{host}}/{{version}}/host-groups
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "test host group",
    "vpc_id": "{{vpc_id}}",
    "availability_zone_id" : "{{dev_availability_zone_id}}",
    "host_spec_id" : "{{dev_host_spec_id}}",
    "windows_enabled": true
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});

client.global.set('host_group_id', response.body.data.id);
client.log('Host Group ID: ' + response.body.data.id);
%}

### Delete VPC
DELETE https://{{host}}/{{version}}/vpcs/{{vpc_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Attempt to delete VPC', function () {
    client.assert(response.status === 412, '412 response not received');
});
%}

### Delete Hostgroup
DELETE https://{{host}}/{{version}}/host-groups/{{host_group_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### Delete VPC
DELETE https://{{host}}/{{version}}/vpcs/{{vpc_id}}
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

> {%
client.test('Delete VPC', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}