# Create an image - assigns dev_software_id (soft-aaaaaaaa) to the image, seed the database first!
# Note: requires dev_software_id in http-client.env.json
POST https://{{host}}/{{version}}/images
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Test Image With Software",
    "logo_uri": null,
    "documentation_uri": null,
    "description": "Test assigning software to an image",
    "script_template": null,
    "vm_template": "CentOS7 x86_64",
    "platform": "Linux",
    "active": true,
    "public": true,
    "availability_zone_ids": [
        "az-aaaaaaaa"
    ],
    "visibility": "public",
    "software_ids": [
        "{{dev_software_id}}"
    ]
}

> {%

client.global.set("image_id", response.body.data.id);
client.log("Image ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 200");
});
%}

###
GET https://{{host}}/{{version}}/images/{{image_id}}/software
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data[0].id === "soft-aaaaaaaa", "Incorrect ID");
});
%}

###
GET https://{{host}}/{{version}}/software/{{dev_software_id}}/images
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data[0].id == client.global.get('image_id'), "Incorrect ID");
});
%}

###
PATCH https://{{host}}/{{version}}/images/{{image_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "software_ids": []
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 200");
});
%}

###
GET https://{{host}}/{{version}}/images/{{image_id}}/software
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_customer}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.data.length === 0, "Incorrect associated software returned");
});
%}

###
DELETE https://{{host}}/{{version}}/images/{{image_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: {{dev_reseller_id_admin}}
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}