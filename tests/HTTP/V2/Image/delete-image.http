### Create the image using the api
POST https://{{host}}/{{version}}/images
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "name": "Test Image - PMC4",
    "logo_uri": "https://images.ukfast.co.uk/logos/centos/300x300_white.png",
    "documentation_uri": "https://docs.centos.org/en-US/docs/",
    "description": "CentOS (Community enterprise Operating System)",
    "script_template": null,
    "vm_template": "CentOS7 x86_64",
    "platform": "Linux",
    "active": true,
    "public": true,
    "availability_zone_ids": [
        "{{dev_availability_zone_id}}"
    ]
}

> {%
client.test("API: Create Image", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
client.global.set("image_id", response.body.data.id);
client.log("Image ID: " + response.body.data.id);
%}

### Now we have an image, we need an deployed instance containing it
POST https://{{host}}/{{version}}/instances
X-consumer-custom-id:  0-0
X-consumer-groups:  ecloud.read, ecloud.write
Content-Type:  application/json

{
    "vpc_id": "{{dev_vpc_id}}",
    "name": "Test",
    "vcpu_cores": 1,
    "ram_capacity": 1024,
    "image_id": "{{image_id}}",
    "requires_floating_ip": true,
    "network_id": "{{dev_network_id}}",
    "volume_capacity": 30,
    "volume_iops": 600,
    "host_group_id": "{{dev_host_group_id}}"
}

> {%
client.global.set("instance_id", response.body.data.id);
client.log("Instance ID: " + response.body.data.id);

client.test("Request executed successfully", function() {
  client.assert(response.status === 202, "Response status is not 202");
});
%}

### In Kingpin Create the image itself (may take some time)
POST https://compute-20.ecloud-service.ukfast.co.uk:8443/api/v2/vpc/{{dev_vpc_id}}/template
Authorization: Basic {{kingpin_auth}}
Content-Type:  application/json

{
    "instanceId": "{{instance_id}}",
    "templateName": "{{image_id}}",
    "annotation": "Test Image - PMC4"
}

> {%
client.test('Kingpin: Create Image', function () {
    client.assert(response.status === 200, '200 response not received');
});
%}

### Check image exists on Kingpin
GET https://compute-20.ecloud-service.ukfast.co.uk:8443/api/v2/vpc/{{dev_vpc_id}}/template/{{image_id}}
Authorization: Basic {{kingpin_auth}}
Content-Type:  application/json

### Now that the image exists in Kingpin we can delete it
DELETE https://{{host}}/{{version}}/images/{{image_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('API: Delete image', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}

### Verify the image has been deleted in the API
GET https://{{host}}/{{version}}/images/{{image_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('API: Check image is deleted', function () {
    client.assert(response.status === 404, '404 response not received');
});
%}

### Check the image has been deleted via Kingpin
GET https://compute-20.ecloud-service.ukfast.co.uk:8443/api/v2/vpc/{{dev_availability_zone_id}}/template/{{image_id}}
Authorization: Basic {{kingpin_auth}}
Content-Type:  application/json

> {%
client.test('Kingpin: Check image is deleted', function () {
    client.assert(response.status === 404, '404 response not received');
});
%}

### Delete the instance
DELETE https://{{host}}/{{version}}/instances/{{instance_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json