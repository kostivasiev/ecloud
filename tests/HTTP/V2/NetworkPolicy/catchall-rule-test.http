###
# Setup - Create Router
POST https://{{host}}/{{version}}/routers
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "name": "test router",
  "vpc_id": "{{dev_vpc_id}}",
  "availability_zone_id" : "{{dev_availability_zone_id}}",
  "router_throughput_id": "rtp-3b54fdfe"
}

> {%
client.test('SETUP - Create Router', function () {
    client.assert(response.status === 202, '202 response not received');
    client.global.set('router_id', response.body.data.id);
    client.log('Router ID: ' + response.body.data.id);
});
%}

###
# Setup - Create Network
POST https://{{host}}/{{version}}/networks
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
  "router_id": "{{router_id}}",
  "subnet": "172.22.2.0/29"
}

> {%
client.test('SETUP - Create Network', function () {
    client.assert(response.status === 202, '202 response not received');
    client.global.set('network_id', response.body.data.id);
    client.log('Network ID: ' + response.body.data.id);
});
%}

###
# Create a Network Policy
POST https://{{host}}/{{version}}/network-policies
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "network_id": "{{network_id}}",
    "name": "Test Policy - PM"
}

> {%
client.test('Create a Network Policy', function () {
    client.assert(response.status === 202, '202 response not received');
    client.global.set('network_policy_id', response.body.data.id);
    client.log('Policy ID: ' + response.body.data.id);
});
%}

###
GET https://{{host}}/{{version}}/network-policies/{{network_policy_id}}/network-rules?type:eq=catchall
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Create a Network Policy', function () {
    client.assert(response.status === 200, '200 response not received');
    client.global.set('catchall_rule_id', response.body.data[0].id);
});
%}


###
PATCH https://{{host}}/{{version}}/network-rules/{{catchall_rule_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "sequence": 9
}

> {%
client.test('Create a Network Policy', function () {
    client.assert(response.status === 202, '202 response not received');
    client.log('Policy ID: ' + response.body.data.id);
});
%}

###
GET https://{{host}}/{{version}}/network-rules/{{catchall_rule_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Create a Network Policy', function () {
    client.assert(response.body.data.sequence === 20000, 'catchall rule was editable!');
});
%}

###
PATCH https://{{host}}/{{version}}/network-rules/{{catchall_rule_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

{
    "action": "ALLOW"
}

> {%
client.test('Create a Network Policy', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}

###
GET https://{{host}}/{{version}}/network-rules/{{catchall_rule_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 1-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('Create a Network Policy', function () {
    client.assert(response.body.data.action === 'ALLOW', 'catchall rule direction was not updated!');
});
%}

###
# CLEANUP - DELETE Network Policy
DELETE https://{{host}}/{{version}}/network-policies/{{network_policy_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('CLEANUP - Delete Network Policy', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}

###
# CLEANUP - DELETE Network
DELETE https://{{host}}/{{version}}/networks/{{network_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('CLEANUP - Delete Network', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}

###
# CLEANUP - DELETE Router
DELETE https://{{host}}/{{version}}/routers/{{router_id}}
Accept: */*
Cache-Control: no-cache
X-consumer-custom-id: 0-0
X-consumer-groups: ecloud.read, ecloud.write
Content-Type: application/json

> {%
client.test('CLEANUP - Delete Router', function () {
    client.assert(response.status === 202, '202 response not received');
});
%}